' =====================================================
' FONCTION UTILITAIRE : Vérifier si tous les PDI d'un bloc sont batterie/rattachés
' =====================================================
Function TousLesPDISontBatterieOuRattaches(wsSource As Worksheet, ligneDebutBloc As Long, ligneFin As Long) As Boolean
    Dim i As Long
    Dim typePDI As String
    
    ' Parcourir toutes les lignes du bloc (ligne principale + lignes accumulées)
    For i = ligneDebutBloc To ligneFin
        typePDI = UCase(Trim(CStr(wsSource.Cells(i, 6).Text))) ' Colonne F = 6
        
        ' Vérifier si le type PDI est autorisé
        If Not EstPDIBatterieOuRattache(typePDI) Then
            TousLesPDISontBatterieOuRattaches = False
            Exit Function
        End If
    Next i
    
    ' Si on arrive ici, tous les PDI du bloc sont autorisés
    TousLesPDISontBatterieOuRattaches = True
End Function

' =====================================================
' FONCTION UTILITAIRE : Vérifier si un PDI est batterie ou rattaché
' =====================================================
Function EstPDIBatterieOuRattache(typePDI As String) As Boolean
    Dim typeClean As String
    
    ' Nettoyer le type (enlever espaces en trop, mettre en majuscules)
    typeClean = UCase(Trim(typePDI))
    
    ' Nettoyer les espaces multiples
    Do While InStr(typeClean, "  ") > 0
        typeClean = Replace(typeClean, "  ", " ")
    Loop
    
    ' Vérifier si c'est un type autorisé
    Select Case typeClean
        Case "BAT C", "BAT P", "RATTACHÉ C", "RATTACHE C", "RATTACHÉ P", "RATTACHE P"
            EstPDIBatterieOuRattache = True
        Case Else
            EstPDIBatterieOuRattache = False
    End Select
End Function

' =====================================================
' MODIFICATION DE LA MACRO PRINCIPALE - PARTIE CONCERNÉE
' À remplacer dans la macro GenererFacadePDI() dans le document main
' =====================================================

' Dans la macro GenererFacadePDI(), remplacer cette section :
' (Rechercher la partie qui commence par "' Construire le texte avec symbole si nécessaire")

            ' Créer la cellule du haut (N° + Observations) - AVEC FORMATAGE DIFFÉRENCIÉ ET TRIANGLE CONDITIONNEL
            Set rngHaut = wsDest.Range(wsDest.Cells(ligneActuelle, colonneActuelle), _
                                        wsDest.Cells(ligneActuelle, colonneActuelle + largeurBloc - 1))
            rngHaut.Merge
            
            With rngHaut
                .NumberFormat = "@"
                
                ' Construire le texte avec symbole si nécessaire - NOUVELLE LOGIQUE CONDITIONNELLE
                Dim texteComplet As String
                Dim symbole As String
                symbole = ""
                
                ' NOUVELLE CONDITION : Vérifier si TOUS les PDI du bloc sont batterie/rattachés
                Dim afficherTriangle As Boolean
                afficherTriangle = False
                
                ' Vérifier d'abord s'il y a au moins un PDI batterie dans le bloc
                Dim aUnePDIBatterie As Boolean
                aUnePDIBatterie = False
                
                For k = ligneSourceActuelle To j - 1
                    Dim typeVerif As String
                    typeVerif = UCase(Trim(CStr(wsSource.Cells(k, 6).Text)))
                    If typeVerif = "BAT C" Or typeVerif = "BAT P" Then
                        aUnePDIBatterie = True
                        Exit For
                    End If
                Next k
                
                ' Si on a au moins un PDI batterie, vérifier que TOUS sont batterie/rattachés
                If aUnePDIBatterie Then
                    afficherTriangle = TousLesPDISontBatterieOuRattaches(wsSource, ligneSourceActuelle, j - 1)
                End If
                
                ' Ajouter le triangle SEULEMENT si la condition est remplie
                If afficherTriangle Then
                    symbole = ChrW(&H25B2) & " " ' Triangle Unicode + espace
                End If
                
                ' Construction du texte avec formatage différencié et saut de ligne
                If obsAccumulees <> "" Then
                    ' Format : [Symbole conditionnel] Numéro + SAUT DE LIGNE + Observations
                    texteComplet = symbole & numAccumule & vbCrLf & obsAccumulees
                Else
                    ' Format : [Symbole conditionnel] Numéro seul
                    texteComplet = symbole & numAccumule
                End If
                
                .Value = texteComplet
                .HorizontalAlignment = xlCenter
                .VerticalAlignment = xlCenter
                .WrapText = True
                
                ' Bordures : toujours fines
                .Borders.LineStyle = xlContinuous
                .Borders.Weight = xlThin
                
                ' Priorité : rouge si dépasse > jaune si colonne V = "B" > pas de couleur
                If fondRouge Then
                    .Interior.Color = RGB(255, 0, 0) ' Rouge (priorité 1)
                    .Font.Color = RGB(255, 255, 255) ' Texte blanc sur fond rouge
                ElseIf valeurColV = "B" Then
                    .Interior.Color = RGB(255, 255, 0) ' Jaune (priorité 2)
                    .Font.Color = RGB(0, 0, 0) ' Texte noir sur fond jaune
                Else
                    .Interior.pattern = xlNone ' Pas de couleur
                End If
            End With
