Sub PlanDePiquage()

    Dim wsSource As Worksheet
    Dim wsDest As Worksheet
    Dim lastRow As Long
    Dim i As Long
    Dim destCol As Long
    Dim destRow As Long
    Dim startCol As Long
    Dim maxCol As Long
    Dim currentCaseModule As String ' Variable pour suivre le module actuel
    Dim nomTournee As String ' Variable pour le numéro de tournée
    Dim nomFeuilleDestination As String ' Variable pour le nom de l'onglet destination

    ' Définir la colonne maximale (O = 15)
    maxCol = 15

    ' Désactiver les mises à jour de l'écran et les calculs automatiques pour accélérer l'exécution
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.DisplayAlerts = False

    ' Définir la feuille de travail source
    Set wsSource = ActiveSheet
    
    ' Récupérer le numéro de tournée depuis le nom de la feuille active
    nomTournee = wsSource.Name
    
    ' Construire le nom de la feuille destination
    nomFeuilleDestination = "PPQ" & nomTournee
    
    ' S'assurer que le nom ne dépasse pas 31 caractères (limite Excel)
    If Len(nomFeuilleDestination) > 31 Then
        nomFeuilleDestination = "PPQ" & Left(nomTournee, 28)
    End If

    ' Supprimer la feuille de destination si elle existe déjà
    On Error Resume Next
    Set wsDest = ThisWorkbook.Sheets(nomFeuilleDestination)
    If Not wsDest Is Nothing Then
        wsDest.Delete
    End If
    On Error GoTo 0

    ' Créer une nouvelle feuille pour la destination
    Set wsDest = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
    wsDest.Name = nomFeuilleDestination

    ' Ajouter une colonne pour le CASE MODULE
    wsDest.Columns("A:A").Insert Shift:=xlToRight
    wsDest.Columns("A:A").ColumnWidth = 3

    ' Trouver la dernière ligne des données
    lastRow = wsSource.Cells(wsSource.Rows.Count, "A").End(xlUp).Row

    ' Initialiser la colonne et la ligne de destination
    destCol = 2 ' On commence à la colonne B car A est réservée pour le CASE MODULE
    destRow = 1

    ' Trouver la première valeur non vide dans la colonne H
    For i = 7 To lastRow
        If Trim(wsSource.Cells(i, 8).Value) <> "" Then
            currentCaseModule = wsSource.Cells(i, 8).Value
            Exit For
        End If
    Next i

    ' Transposer les données
    For i = 7 To lastRow
        ' Vérifier s'il y a un changement de case dans la colonne H
        If wsSource.Cells(i, 8).Value <> "" And wsSource.Cells(i, 8).Value <> currentCaseModule Then
            currentCaseModule = wsSource.Cells(i, 8).Value
            If destCol > 2 Then
                destCol = 2
                destRow = destRow + 4
            End If
        End If

        ' Si nous avons atteint la colonne maximale
        If destCol > maxCol + 1 Then ' +1 car on a décalé avec l'insertion de la colonne A
            destCol = 2
            destRow = destRow + 4
        End If

        ' Transposer et forcer le format texte (sans égal visible)

        With wsDest.Cells(destRow, destCol)
            .NumberFormat = "@"
            .Value = CStr(wsSource.Cells(i, 1).Text) ' NUM ext
        End With

        With wsDest.Cells(destRow + 1, destCol)
            .NumberFormat = "@"
            .Value = CStr(wsSource.Cells(i, 4).Text) ' OBSERVATIONS
        End With

        With wsDest.Cells(destRow + 2, destCol)
            .NumberFormat = "@"
            .Value = CStr(wsSource.Cells(i, 2).Text) ' VOIE
            .Interior.Color = wsSource.Cells(i, 2).Interior.Color
            .Font.Color = wsSource.Cells(i, 2).Font.Color
        End With

        With wsDest.Cells(destRow, 1)
            .NumberFormat = "@"
            .Value = CStr(currentCaseModule)
            .Orientation = 90
            .Font.Bold = True
            .Interior.Color = RGB(230, 230, 230)
        End With

        With wsDest.Range(wsDest.Cells(destRow, destCol), wsDest.Cells(destRow + 2, destCol)).Borders
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With

        ' Avancer à la colonne suivante
        destCol = destCol + 1
    Next i

    ' Supprimer les 8 premières lignes
    ' wsDest.Rows("1:8").Delete

    ' Réactiver les mises à jour de l'écran et les calculs automatiques
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Application.DisplayAlerts = True

    ' Appels aux autres macros de mise en forme
    Call FusionnerCellulesMemeLigne(nomFeuilleDestination)
    Call AjusterDimensions(nomFeuilleDestination)
    Call CentrerCellules(nomFeuilleDestination)
    Call FusionnerCellulesCase(nomFeuilleDestination)
    Call ConfigurerMiseEnPage(nomFeuilleDestination)
    Call AdjustFontSize(nomFeuilleDestination)

    MsgBox "Création du cahier de tournée terminée!"

End Sub



Sub FusionnerCellulesMemeLigne(ByRef FeuilleDest As String)
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim lastCol As Long
    Dim i As Long, j As Long
    Dim startCol As Long
    Dim maxCol As Long
    
    ' Définir la colonne maximale (O = 15)
    maxCol = 16 ' Ajusté car on a maintenant une colonne de plus
    
    Application.DisplayAlerts = False

    ' Définir la feuille de travail cible
    Set ws = Worksheets(FeuilleDest)


    ' Trouver la dernière ligne et la dernière colonne des données
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    
    ' Parcourir les lignes de la feuille par groupe de 4 lignes
    For i = 1 To lastRow Step 4
        For rowOffset = 0 To 2 ' Traiter les 3 premières lignes de chaque groupe de 4
            Dim currentRow As Long
            currentRow = i + rowOffset
            
            If currentRow <= lastRow Then
                startCol = 2 ' Commencer à la colonne B car A est réservée pour le CASE MODULE
    
                ' Parcourir les colonnes de la ligne, limité à maxCol
                For j = 3 To maxCol ' Ajusté pour commencer à C
                    ' Vérifier si la cellule actuelle et la cellule de départ ne sont pas vides
                    If Not IsEmpty(ws.Cells(currentRow, startCol)) And Not IsEmpty(ws.Cells(currentRow, j)) Then
                        ' Vérifier si la valeur de la cellule actuelle est égale à la valeur de la cellule de départ
                        If ws.Cells(currentRow, j).Value <> ws.Cells(currentRow, startCol).Value Then
                            ' Fusionner les cellules de la même valeur
                            If j - startCol > 1 Then
                                ws.Range(ws.Cells(currentRow, startCol), ws.Cells(currentRow, j - 1)).Merge
                                ws.Cells(currentRow, startCol).HorizontalAlignment = xlCenter
                            End If
                            startCol = j ' Réinitialiser startCol à la colonne actuelle
                        End If
                    ElseIf Not IsEmpty(ws.Cells(currentRow, startCol)) And IsEmpty(ws.Cells(currentRow, j)) Then
                        ' Fusionner jusqu'à la cellule actuelle si elle est vide
                        If j - startCol > 1 Then
                            ws.Range(ws.Cells(currentRow, startCol), ws.Cells(currentRow, j - 1)).Merge
                            ws.Cells(currentRow, startCol).HorizontalAlignment = xlCenter
                        End If
                        startCol = j + 1 ' Ignorer la cellule vide et passer à la suivante
                    Else
                        startCol = j + 1 ' Ignorer la cellule vide et passer à la suivante
                    End If
                Next j
                
                ' Fusionner les cellules restantes à la fin de la ligne si elles sont égales et non vides
                If j - startCol > 1 And Not IsEmpty(ws.Cells(currentRow, startCol)) Then
                    ws.Range(ws.Cells(currentRow, startCol), ws.Cells(currentRow, maxCol)).Merge
                    ws.Cells(currentRow, startCol).HorizontalAlignment = xlCenter
                End If
            End If
        Next rowOffset
    Next i
    
    Application.DisplayAlerts = True
End Sub

Sub FusionnerCellulesCase(ByRef FeuilleDest As String)
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim i As Long
    Dim currentValue As String
    Dim valuesProcessed As Object ' Dictionnaire pour suivre les valeurs déjà traitées
    
    Application.DisplayAlerts = False
    
    ' Définir la feuille de travail cible
    Set ws = Worksheets(FeuilleDest)

    
    ' Trouver la dernière ligne des données
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    
    ' Créer un dictionnaire pour suivre les valeurs déjà traitées
    Set valuesProcessed = CreateObject("Scripting.Dictionary")
    
    ' Parcourir toutes les lignes
    For i = 1 To lastRow
        ' Si la cellule n'est pas vide et n'a pas déjà été traitée
        If Not IsEmpty(ws.Cells(i, 1)) And Not valuesProcessed.Exists(ws.Cells(i, 1).Value) Then
            currentValue = ws.Cells(i, 1).Value
            valuesProcessed.Add currentValue, True
            
            ' Trouver toutes les cellules avec cette valeur et les fusionner
            FusionnerMemeValeur ws, currentValue, lastRow
        End If
    Next i
    
    Application.DisplayAlerts = True
End Sub

Sub AjouterIndicateursContinuite(ByRef FeuilleDest As String)
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim i As Long
    Dim currentCase As String
    Dim isFirstEmpty As Boolean
    
    ' Définir la feuille de travail cible
    Set ws = Worksheets(FeuilleDest)

    
    ' Trouver la dernière ligne des données
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    
    ' Symbole flèche vers le bas
    Const FLECHE = "?"  ' Caractère Unicode 2193
    
    currentCase = ""
    isFirstEmpty = True
    
    ' Parcourir toutes les lignes
    For i = 1 To lastRow
        If Not IsEmpty(ws.Cells(i, 1)) Then
            ' Stocker la valeur de la case actuelle
            currentCase = ws.Cells(i, 1).Value
            isFirstEmpty = True
        ElseIf currentCase <> "" Then
            ' Si la cellule est vide et qu'on a une case en cours
            ' Vérifier la ligne suivante pour voir si c'est la même case
            If i < lastRow Then
                If Not IsEmpty(ws.Cells(i + 1, 1)) And ws.Cells(i + 1, 1).Value = currentCase Then
                    ' Si c'est la même case qui continue après la ligne vide,
                    ' Ajouter le symbole de flèche
                    If isFirstEmpty Then
                        With ws.Cells(i, 1)
                            .Value = FLECHE
                            .HorizontalAlignment = xlCenter
                            .VerticalAlignment = xlCenter
                            .Font.Bold = True
                            .Font.Size = 14
                            .Interior.Color = RGB(230, 230, 230) ' Fond gris clair
                        End With
                        isFirstEmpty = False
                    End If
                ElseIf Not IsEmpty(ws.Cells(i + 1, 1)) And ws.Cells(i + 1, 1).Value <> currentCase Then
                    ' Si c'est une nouvelle case qui commence, réinitialiser
                    currentCase = ""
                    isFirstEmpty = True
                End If
            End If
        End If
    Next i
End Sub

Sub FusionnerMemeValeur(ws As Worksheet, valueToFind As String, lastRow As Long)
    Dim i As Long
    Dim cellsToMerge As New Collection
    Dim differentValueRow As Long
    
    ' Collecter toutes les cellules avec cette valeur
    For i = 1 To lastRow
        If Not IsEmpty(ws.Cells(i, 1)) Then
            If ws.Cells(i, 1).Value = valueToFind Then
                ' Ajouter cette ligne à la collection
                cellsToMerge.Add i
            ElseIf cellsToMerge.Count > 0 Then
                ' Si on trouve une valeur différente après avoir trouvé au moins une occurrence
                ' Noter cette ligne comme le début d'une autre valeur
                differentValueRow = i
                Exit For
            End If
        End If
    Next i
    
    ' Si une collection de cellules à fusionner a été créée
    If cellsToMerge.Count > 0 Then
        ' Fusionner les cellules, s'arrêter 1 ligne avant la valeur différente si elle existe
        For i = 1 To cellsToMerge.Count
            Dim currentRow As Long
            currentRow = cellsToMerge(i)
            
            ' Si c'est la dernière occurrence et qu'une valeur différente suit
            If i = cellsToMerge.Count And differentValueRow > 0 Then
                ' Ne pas fusionner la dernière ligne avant la valeur différente
                If currentRow < differentValueRow - 1 Then
                    ws.Range(ws.Cells(currentRow, 1), ws.Cells(differentValueRow - 2, 1)).Merge
                End If
            ElseIf i < cellsToMerge.Count Then
                ' Fusionner jusqu'à la ligne avant la prochaine occurrence
                Dim nextRow As Long
                nextRow = cellsToMerge(i + 1)
                
                If nextRow - currentRow > 1 Then
                    ws.Range(ws.Cells(currentRow, 1), ws.Cells(nextRow - 1, 1)).Merge
                End If
            ElseIf differentValueRow = 0 Then
                ' Si c'est la dernière occurrence et aucune valeur différente ne suit
                ws.Range(ws.Cells(currentRow, 1), ws.Cells(lastRow, 1)).Merge
            End If
            
            ' Formater la cellule
            With ws.Cells(currentRow, 1)
                .HorizontalAlignment = xlCenter
                .VerticalAlignment = xlCenter
                .Orientation = 90 ' Texte vertical
                .Font.Bold = True
                .Interior.Color = RGB(230, 230, 230) ' Fond gris clair
            End With
        Next i
    End If
End Sub
Sub AjusterDimensions(ByRef FeuilleDest As String)
    Dim i As Long
    Dim ws As Worksheet
    Dim lastRow As Long
    
    ' Désactiver les mises à jour de l'écran et les calculs automatiques pour accélérer l'exécution
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual

    ' Définir la feuille de travail cible
    Set ws = Worksheets(FeuilleDest)


    ' Trouver la dernière ligne utilisée
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row

    ' Ajuster la colonne CASE MODULE
    ws.Columns("A:A").ColumnWidth = 3
    
    ' Ajuster la hauteur et les propriétés des lignes jusqu'à la dernière ligne utilisée
    For i = 1 To lastRow Step 4
        With ws.Rows(i)
            .RowHeight = 18
            .Font.Size = 14
            .Font.Bold = True
        End With
        If i + 1 <= lastRow Then
            With ws.Rows(i + 1)
                .RowHeight = 33
                .Font.Size = 8
                .Font.Bold = False
            End With
        End If
        If i + 2 <= lastRow Then
            With ws.Rows(i + 2)
                .RowHeight = 33
            End With
        End If
        If i + 3 <= lastRow Then
            ws.Rows(i + 3).RowHeight = 10
        End If
    Next i

    ' Ajuster uniquement la largeur des colonnes B à P (anciennement A à O)
    ws.Columns("B:P").ColumnWidth = 8.5
    
    ' Réactiver les mises à jour de l'écran et les calculs automatiques
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
End Sub


Sub CentrerCellules(ByRef FeuilleDest As String)
    Dim ws As Worksheet
    Dim usedRange As Range
    Dim maxCol As Long
    
    maxCol = 16 ' Ajusté car on a maintenant une colonne de plus

    ' Définir la feuille de travail cible
    Set ws = Worksheets(FeuilleDest)

    ' Définir la plage utilisée dans la feuille de travail (de B à P)
    Set usedRange = ws.Range(ws.Cells(1, 2), ws.Cells(ws.Cells(ws.Rows.Count, "B").End(xlUp).Row, maxCol))

    ' Centrer horizontalement et verticalement les cellules de la plage utilisée
    With usedRange
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .WrapText = True
    End With
End Sub

Sub ConfigurerMiseEnPage(ByRef FeuilleDest As String)
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim i As Long
    
    Application.ScreenUpdating = False ' Désactiver les mises à jour de l'écran pour accélérer l'exécution

    ' Définir la feuille de travail cible
    Set ws = Worksheets(FeuilleDest)
    
    ' Trouver la dernière ligne des données
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    
    ' Supprimer tous les sauts de page existants
    ws.ResetAllPageBreaks
    
    ' Ajouter des sauts de page toutes les 24 lignes
    For i = 24 To lastRow Step 24
        ws.HPageBreaks.Add Before:=ws.Rows(i + 1)
    Next i
    
    ' Configurer la mise en page pour chaque feuille
    For Each ws In ThisWorkbook.Sheets
        With ws.PageSetup
            .Orientation = xlLandscape ' Mode paysage
            .PaperSize = xlPaperA4 ' Papier format A4
            .TopMargin = Application.InchesToPoints(0) ' Marges à 0
            .BottomMargin = Application.InchesToPoints(0)
            .LeftMargin = Application.InchesToPoints(0)
            .RightMargin = Application.InchesToPoints(0)
            .HeaderMargin = Application.InchesToPoints(0)
            .FooterMargin = Application.InchesToPoints(0)
            .CenterFooter = "Page &P" ' Numéro de page au centre du pied de page
            
            ' Ajuster la mise à l'échelle pour limiter aux 16 colonnes (A à P)
            .FitToPagesWide = 1
            .FitToPagesTall = False
            .Zoom = False
        End With
    Next ws

    Application.ScreenUpdating = True ' Réactiver les mises à jour de l'écran
End Sub

Sub AdjustFontSize(ByRef FeuilleDest As String)
    Dim ws As Worksheet
    Dim cell As Range
    Dim startRow As Long
    Dim endRow As Long
    Dim col As Long

    Set ws = Worksheets(FeuilleDest)
    startRow = 3
    endRow = ws.Cells(ws.Rows.Count, "B").End(xlUp).Row

    For col = 2 To 54 ' Colonnes B à BB
        For i = startRow To endRow Step 4
            If i Mod 2 <> 0 Then ' Lignes impaires
                Set cell = ws.Cells(i, col)
                If Not cell.MergeCells Then
                    If cell.WrapText Then
                        cell.Font.Size = 6
                    Else
                        cell.Font.Size = 6
                    End If
                End If
            End If
        Next i
    Next col
End Sub
