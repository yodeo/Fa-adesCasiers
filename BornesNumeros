' =====================================================
' SUB : Simplification des bornes avec regroupement par voies (VERSION MULTIVOIES)
' =====================================================
Sub SimplificationBornesNumPDIMultivoies()
    Dim ws As Worksheet
    Dim wsFacade As Worksheet
    Dim lastRow As Long
    Dim lastCol As Long
    Dim nbModifiees As Long
    
    ' Vérifier qu'on est sur la bonne feuille
    Set ws = ActiveSheet
    If InStr(ws.Name, "Fac") = 0 Then
        MsgBox "Veuillez activer une feuille façade avant d'exécuter cette macro.", vbExclamation
        Exit Sub
    End If
    
    Set wsFacade = ws
    
    ' Trouver les limites de la feuille
    lastRow = wsFacade.Cells(wsFacade.Rows.Count, 1).End(xlUp).Row
    lastCol = 26 ' Colonnes A à Z
    
    Application.ScreenUpdating = False
    
    nbModifiees = 0
    
    ' Traiter chaque cellule de numéros PDI
    Dim i As Long, j As Long
    For i = 1 To lastRow Step 2 ' Lignes impaires (numéros PDI)
        For j = 1 To lastCol
            Dim celluleNum As Range
            Set celluleNum = wsFacade.Cells(i, j)
            
            ' Vérifier si la cellule contient des numéros
            Dim valeurNum As String
            valeurNum = Trim(CStr(celluleNum.Value))
            
            If valeurNum <> "" And Not EstUnSymbole(valeurNum) Then
                ' Obtenir les libellés de voies correspondants
                Dim voies As String
                voies = ObtenirLibelleVoiePDI(wsFacade, i, j)
                
                If voies <> "" Then
                    ' Traiter la case multivoie
                    Dim nouveauTexte As String
                    nouveauTexte = TraiterCaseMultivoies(valeurNum, voies)
                    
                    If nouveauTexte <> "" And nouveauTexte <> celluleNum.Value Then
                        ' Conserver le formatage existant
                        Dim formatOriginal As Variant
                        Dim couleurFond As Long
                        Dim couleurTexte As Long
                        Dim estGras As Boolean
                        
                        formatOriginal = celluleNum.NumberFormat
                        couleurFond = celluleNum.Interior.Color
                        couleurTexte = celluleNum.Font.Color
                        estGras = celluleNum.Font.Bold
                        
                        ' Mettre à jour la valeur
                        celluleNum.Value = nouveauTexte
                        
                        ' Restaurer le formatage
                        celluleNum.NumberFormat = formatOriginal
                        celluleNum.Interior.Color = couleurFond
                        celluleNum.Font.Color = couleurTexte
                        celluleNum.Font.Bold = estGras
                        
                        ' Réappliquer le formatage différencié
                        Call AppliquerFormatageDifferencieBornes(celluleNum, nouveauTexte)
                        
                        nbModifiees = nbModifiees + 1
                    End If
                End If
            End If
        Next j
    Next i
    
    Application.ScreenUpdating = True
    
    ' Message de confirmation
    MsgBox "Simplification des bornes multivoies terminée." & vbCrLf & _
           "Nombre de cellules modifiées : " & nbModifiees, _
           vbInformation, "Bornes Multivoies"
End Sub

' =====================================================
' FUNCTION : Traiter une case multivoies
' =====================================================
Function TraiterCaseMultivoies(numerosTexte As String, voiesTexte As String) As String
    ' Extraire le symbole de début et les observations
    Dim symbole As String
    Dim observations As String
    symbole = ExtraireSymboleDebut(numerosTexte)
    observations = ExtraireObservations(numerosTexte)
    
    ' Nettoyer le texte des numéros (enlever symbole et observations)
    Dim numerosSeuls As String
    numerosSeuls = EnleverSymboleDebut(numerosTexte)
    If InStr(numerosSeuls, vbCrLf) > 0 Then
        numerosSeuls = Split(numerosSeuls, vbCrLf)(0)
    End If
    
    ' Séparer les voies
    Dim voiesArray As Variant
    If InStr(voiesTexte, " / ") > 0 Then
        voiesArray = Split(voiesTexte, " / ")
    Else
        ReDim voiesArray(0)
        voiesArray(0) = voiesTexte
    End If
    
    ' Si une seule voie, traitement normal
    If UBound(voiesArray) = 0 Then
        Dim res As String
        res = TraiterVoieSimple(numerosSeuls)
        If observations <> "" Then
            res = res & vbCrLf & observations
        End If
        TraiterCaseMultivoies = symbole & res
        Exit Function
    End If
    
    ' Cas multivoies : extraire les numéros par voie
    Dim resultatsVoies As Collection
    Set resultatsVoies = New Collection
    
    Dim indexVoie As Integer
    For indexVoie = 0 To UBound(voiesArray)
        Dim voieActuelle As String
        voieActuelle = Trim(voiesArray(indexVoie))
        
        ' Extraire les numéros correspondant à cette voie
        Dim numerosVoie As Collection
        Set numerosVoie = ExtraireNumerosParVoie(numerosSeuls, indexVoie, UBound(voiesArray) + 1)
        
        ' Générer les bornes pour cette voie
        Dim bornesVoie As String
        bornesVoie = GenererBornesVoieUnique(numerosVoie)
        
        If bornesVoie <> "" Then
            resultatsVoies.Add "[" & bornesVoie & "]"
        End If
    Next indexVoie
    
    ' Construire le résultat final
    Dim resultatFinal As String
    resultatFinal = ""
    
    Dim i As Integer
    For i = 1 To resultatsVoies.Count
        If i > 1 Then resultatFinal = resultatFinal & " "
        resultatFinal = resultatFinal & resultatsVoies(i)
    Next i
    
    ' Ajouter les observations si présentes
    If observations <> "" Then
        resultatFinal = resultatFinal & vbCrLf & observations
    End If
    
    TraiterCaseMultivoies = symbole & resultatFinal
End Function

' =====================================================
' FUNCTION : Traiter une voie simple (sans crochets)
' =====================================================
Function TraiterVoieSimple(numerosTexte As String) As String
    Dim collPairs As New Collection
    Dim collImpairs As New Collection
    
    ' Extraire les numéros pairs et impairs
    Call ExtraireNumerosPDI(numerosTexte, collPairs, collImpairs)
    
    ' Générer les bornes
    Dim res As String
    res = ""
    
    If collPairs.Count > 0 Then
        Dim resPairs As String
        resPairs = GenererBornesSimples(collPairs)
        If resPairs <> "" Then res = resPairs
    End If
    
    If collImpairs.Count > 0 Then
        Dim resImpairs As String
        resImpairs = GenererBornesSimples(collImpairs)
        If resImpairs <> "" Then
            If res <> "" Then
                res = res & " / " & resImpairs
            Else
                res = resImpairs
            End If
        End If
    End If
    
    TraiterVoieSimple = res
End Function

' =====================================================
' FUNCTION : Extraire les numéros correspondant à une voie spécifique
' =====================================================
Function ExtraireNumerosParVoie(numerosTexte As String, indexVoie As Integer, totalVoies As Integer) As Collection
    Set ExtraireNumerosParVoie = New Collection
    
    ' Séparer les groupes de numéros par voie
    ' Logique : diviser les numéros en groupes selon le nombre de voies
    Dim tousNumeros As Collection
    Set tousNumeros = New Collection
    
    ' Extraire tous les numéros dans l'ordre
    Dim reg As Object
    Set reg = CreateObject("VBScript.RegExp")
    reg.Pattern = "\d+"
    reg.Global = True
    
    Dim matches As Object
    Set matches = reg.Execute(numerosTexte)
    
    Dim i As Long
    For i = 0 To matches.Count - 1
        Dim numero As Long
        numero = CLng(matches(i).Value)
        If numero > 0 Then
            tousNumeros.Add numero
        End If
    Next i
    
    ' Si pas de numéros, retourner collection vide
    If tousNumeros.Count = 0 Then Exit Function
    
    ' Diviser les numéros entre les voies
    ' Méthode simple : répartition séquentielle
    For i = indexVoie + 1 To tousNumeros.Count Step totalVoies
        ExtraireNumerosParVoie.Add tousNumeros(i)
    Next i
End Function

' =====================================================
' FUNCTION : Générer les bornes pour une voie unique
' =====================================================
Function GenererBornesVoieUnique(numerosVoie As Collection) As String
    If numerosVoie.Count = 0 Then
        GenererBornesVoieUnique = ""
        Exit Function
    End If
    
    ' Séparer pairs et impairs
    Dim pairs As New Collection
    Dim impairs As New Collection
    
    Dim i As Long
    For i = 1 To numerosVoie.Count
        Dim numero As Long
        numero = numerosVoie(i)
        If numero Mod 2 = 0 Then
            pairs.Add numero
        Else
            impairs.Add numero
        End If
    Next i
    
    ' Générer les bornes pour chaque parité
    Dim res As String
    res = ""
    
    If pairs.Count > 0 Then
        Dim resPairs As String
        resPairs = GenererBornesSimples(pairs)
        If resPairs <> "" Then res = resPairs
    End If
    
    If impairs.Count > 0 Then
        Dim resImpairs As String
        resImpairs = GenererBornesSimples(impairs)
        If resImpairs <> "" Then
            If res <> "" Then
                res = res & " / " & resImpairs
            Else
                res = resImpairs
            End If
        End If
    End If
    
    GenererBornesVoieUnique = res
End Function

' =====================================================
' FUNCTION : Générer des bornes simples pour une collection de numéros
' =====================================================
Function GenererBornesSimples(coll As Collection) As String
    If coll.Count = 0 Then
        GenererBornesSimples = ""
        Exit Function
    End If
    
    ' Convertir en tableau et trier
    Dim arr() As Long
    ReDim arr(coll.Count - 1)
    
    Dim i As Long
    For i = 1 To coll.Count
        arr(i - 1) = coll(i)
    Next i
    
    ' Tri simple
    Dim j As Long, temp As Long
    For i = 0 To UBound(arr) - 1
        For j = i + 1 To UBound(arr)
            If arr(i) > arr(j) Then
                temp = arr(i)
                arr(i) = arr(j)
                arr(j) = temp
            End If
        Next j
    Next i
    
    ' Créer les plages
    Dim plages As New Collection
    Dim debut As Long, fin As Long
    debut = arr(0)
    fin = arr(0)
    
    For i = 1 To UBound(arr)
        If arr(i) = fin + 2 Then ' Même parité et consécutif
            fin = arr(i)
        Else
            ' Terminer la plage actuelle
            If debut = fin Then
                plages.Add CStr(debut)
            Else
                plages.Add debut & " à " & fin
            End If
            debut = arr(i)
            fin = arr(i)
        End If
    Next i
    
    ' Ajouter la dernière plage
    If debut = fin Then
        plages.Add CStr(debut)
    Else
        plages.Add debut & " à " & fin
    End If
    
    ' Construire le résultat
    Dim res As String
    res = ""
    For i = 1 To plages.Count
        If i > 1 Then res = res & " / "
        res = res & plages(i)
    Next i
    
    GenererBornesSimples = res
End Function

' =====================================================
' MACRO : Version améliorée pour les boutons
' =====================================================
Sub SimplifierBornesFromButtonMultivoies()
    ' Macro appelée par le bouton "Simplifier Bornes" avec support multivoies
    Dim ws As Worksheet
    Set ws = ActiveSheet
    
    ' Vérifier qu'on est sur la bonne feuille
    If InStr(ws.Name, "Fac") = 0 Then
        MsgBox "Cette fonction doit être utilisée sur une feuille façade", vbExclamation
        Exit Sub
    End If
    
    ' Confirmation avant exécution
    If MsgBox("Voulez-vous simplifier les bornes de numéros avec regroupement par voies ?" & vbCrLf & _
              "Cette action va regrouper les numéros consécutifs en plages avec crochets pour les multivoies." & vbCrLf & _
              "Exemple : [10 à 80 / 23 à 53] [12 à 98 / 45 à 99]", _
              vbQuestion + vbYesNo, "Simplifier Bornes Multivoies") = vbYes Then
        
        ' Exécuter la macro de simplification multivoies
        Call SimplificationBornesNumPDIMultivoies
    End If
End Sub

' =====================================================
' MACRO DE TEST : Analyser une cellule multivoies
' =====================================================
Sub TesterCelluleMultivoies()
    On Error Resume Next
    
    Dim cellule As Range
    Set cellule = Selection.Cells(1, 1)
    
    Dim valeurNum As String
    Dim valeurVoie As String
    
    valeurNum = CStr(cellule.Value)
    
    ' Obtenir la voie correspondante
    If cellule.Row Mod 2 = 1 Then ' Ligne de numéros
        valeurVoie = CStr(ActiveSheet.Cells(cellule.Row + 1, cellule.Column).Value)
    Else ' Ligne de voies
        valeurVoie = valeurNum
        valeurNum = CStr(ActiveSheet.Cells(cellule.Row - 1, cellule.Column).Value)
    End If
    
    Dim msg As String
    msg = "TEST CELLULE MULTIVOIES" & vbCrLf & vbCrLf
    msg = msg & "Adresse : " & cellule.Address & vbCrLf
    msg = msg & "Numéros : " & valeurNum & vbCrLf
    msg = msg & "Voies : " & valeurVoie & vbCrLf & vbCrLf
    
    ' Test de traitement
    Dim resultat As String
    resultat = TraiterCaseMultivoies(valeurNum, valeurVoie)
    
    msg = msg & "RÉSULTAT APRÈS TRAITEMENT :" & vbCrLf
    msg = msg & resultat & vbCrLf & vbCrLf
    
    ' Comparer avec l'original
    If resultat <> valeurNum Then
        msg = msg & "✅ La cellule sera modifiée"
    Else
        msg = msg & "ℹ️ Aucune modification nécessaire"
    End If
    
    MsgBox msg, vbInformation, "Test Multivoies"
    
    On Error GoTo 0
End Sub
