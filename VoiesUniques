Sub OptimiserAffichageFacade()
    ' Déclaration des variables
    Dim ws As Worksheet
    Dim dictLibelles As Object
    Dim cell As Range
    Dim cellMerge As Range
    Dim i As Long, j As Long
    Dim nbSuppression As Long
    Dim wsMergeInfo As Worksheet
    Dim ligneMerge As Long
    Dim cellsToEmpty As Object
    Dim tempSheetName As String
    Dim sheetExists As Boolean
    Dim counter As Integer
    
    ' Initialisation
    Set ws = ActiveSheet
    Set dictLibelles = CreateObject("Scripting.Dictionary")
    Set cellsToEmpty = CreateObject("Scripting.Dictionary")
    nbSuppression = 0
    
    ' Vérifier qu'on a une feuille active
    If ws Is Nothing Then
        MsgBox "Aucune feuille active détectée.", vbExclamation
        Exit Sub
    End If
    
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    ' Créer une feuille temporaire avec un nom unique
    tempSheetName = "TempMergeInfo"
    counter = 0
    
    Do
        sheetExists = False
        Dim wsTest As Worksheet
        On Error Resume Next
        Set wsTest = ThisWorkbook.Worksheets(tempSheetName)
        If Not wsTest Is Nothing Then
            sheetExists = True
            Set wsTest = Nothing
        End If
        On Error GoTo 0
        
        If sheetExists Then
            counter = counter + 1
            tempSheetName = "TempMergeInfo" & counter
        End If
    Loop While sheetExists
    
    ' Créer la feuille temporaire
    On Error GoTo ErrorHandler
    Set wsMergeInfo = ThisWorkbook.Worksheets.Add
    wsMergeInfo.Name = tempSheetName
    wsMergeInfo.Visible = xlSheetVeryHidden
    
    ' ÉTAPE 1: Stocker les informations de fusion
    ligneMerge = 1
    For Each cell In ws.UsedRange
        If cell.MergeCells Then
            If cell.Address = cell.MergeArea.Cells(1, 1).Address Then
                wsMergeInfo.Cells(ligneMerge, 1).Value = cell.MergeArea.Address
                
                ' Stocker la valeur avec gestion spéciale pour les numéros
                If cell.Row Mod 2 = 1 Then ' Ligne impaire (numéro)
                    wsMergeInfo.Cells(ligneMerge, 2).Value = "'" & CStr(cell.Value)
                    wsMergeInfo.Cells(ligneMerge, 3).Value = cell.NumberFormat
                Else ' Ligne paire (libellé)
                    wsMergeInfo.Cells(ligneMerge, 2).Value = cell.Value
                    wsMergeInfo.Cells(ligneMerge, 3).Value = cell.NumberFormat
                End If
                
                ligneMerge = ligneMerge + 1
            End If
        End If
    Next cell
    
    ' ÉTAPE 2: Préparation pour la défusion
    Dim mergeDict As Object
    Dim formatDict As Object
    Set mergeDict = CreateObject("Scripting.Dictionary")
    Set formatDict = CreateObject("Scripting.Dictionary")
    
    ' Stocker les informations sur les libellés de voie fusionnés
    For Each cell In ws.UsedRange
        If cell.Row Mod 2 = 0 Then  ' Ligne paire (libellé de voie)
            If cell.MergeCells Then
                If cell.Address = cell.MergeArea.Cells(1, 1).Address Then
                    For Each cellMerge In cell.MergeArea
                        Dim cellAboveCheck As Range
                        Set cellAboveCheck = ws.Cells(cellMerge.Row - 1, cellMerge.Column)
                        
                        If Not IsEmpty(cellAboveCheck.Value) And cellAboveCheck.Value <> "" Then
                            If Not mergeDict.Exists(cellMerge.Address) Then
                                mergeDict.Add cellMerge.Address, cell.Value
                                formatDict.Add cellMerge.Address, cell.NumberFormat
                            End If
                        End If
                    Next cellMerge
                End If
            End If
        End If
    Next cell
    
    ' Défusionner toutes les cellules
    ws.UsedRange.UnMerge
    
    ' Restaurer les valeurs dans les cellules concernées
    Dim addr As Variant
    For Each addr In mergeDict.Keys
        ws.Range(addr).Value = mergeDict(addr)
        If formatDict.Exists(addr) Then
            ws.Range(addr).NumberFormat = formatDict(addr)
        End If
    Next addr
    
    ' ÉTAPE 3: Compter les occurrences de chaque libellé
    For Each cell In ws.UsedRange
        If cell.Row Mod 2 = 0 Then  ' Ligne paire (libellé de voie)
            If Not IsEmpty(cell.Value) And cell.Value <> "" Then
                Dim cleanedValue As String
                cleanedValue = Trim(CStr(cell.Value))
                
                ' Exclure les valeurs numériques
                If Not IsNumeric(cleanedValue) And cleanedValue <> "" Then
                    Dim cellAbove As Range
                    Set cellAbove = ws.Cells(cell.Row - 1, cell.Column)
                    
                    ' Ne compter que si la cellule du dessus n'est pas vide
                    If Not IsEmpty(cellAbove.Value) And cellAbove.Value <> "" Then
                        If dictLibelles.Exists(cleanedValue) Then
                            dictLibelles(cleanedValue) = dictLibelles(cleanedValue) + 1
                        Else
                            dictLibelles.Add cleanedValue, 1
                        End If
                    End If
                End If
            End If
        End If
    Next cell
    
    ' ÉTAPE 4: Identifier les numéros à supprimer pour les libellés uniques
    For Each cell In ws.UsedRange
        If cell.Row Mod 2 = 0 Then  ' Ligne paire (libellé de voie)
            If Not IsEmpty(cell.Value) And cell.Value <> "" Then
                Dim libelle As String
                libelle = Trim(CStr(cell.Value))
                
                If Not IsNumeric(libelle) And libelle <> "" Then
                    Set cellAbove = ws.Cells(cell.Row - 1, cell.Column)
                    
                    If Not IsEmpty(cellAbove.Value) And cellAbove.Value <> "" Then
                        ' Si ce libellé est unique
                        If dictLibelles.Exists(libelle) And dictLibelles(libelle) = 1 Then
                            If cellAbove.Row Mod 2 = 1 Then ' Vérifier que c'est bien un numéro
                                If Not cellsToEmpty.Exists(cellAbove.Address) Then
                                    cellsToEmpty.Add cellAbove.Address, True
                                    nbSuppression = nbSuppression + 1
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        End If
    Next cell
    
    ' ÉTAPE 5: Mettre à jour la feuille temporaire
    For i = 1 To ligneMerge - 1
        If Not IsEmpty(wsMergeInfo.Cells(i, 1).Value) Then
            Dim mergeRange As Range
            Set mergeRange = ws.Range(wsMergeInfo.Cells(i, 1).Value)
            
            If cellsToEmpty.Exists(mergeRange.Cells(1, 1).Address) Then
                wsMergeInfo.Cells(i, 2).Value = ""
            End If
        End If
    Next i
    
    ' ÉTAPE 6: Vider les cellules marquées
    Dim adresse As Variant
    For Each adresse In cellsToEmpty.Keys
        ws.Range(adresse).Value = ""
    Next adresse
    
    ' ÉTAPE 7: Restaurer les fusions
    For i = 1 To ligneMerge - 1
        If Not IsEmpty(wsMergeInfo.Cells(i, 1).Value) Then
            Dim rangeToMerge As Range
            Set rangeToMerge = ws.Range(wsMergeInfo.Cells(i, 1).Value)
            
            rangeToMerge.Merge
            
            If rangeToMerge.Row Mod 2 = 1 Then ' Numéros
                If Not IsEmpty(wsMergeInfo.Cells(i, 2).Value) Then
                    Dim cellValue As String
                    cellValue = CStr(wsMergeInfo.Cells(i, 2).Value)
                    If Left(cellValue, 1) = "'" Then
                        cellValue = Mid(cellValue, 2)
                    End If
                    
                    rangeToMerge.NumberFormat = "@"
                    rangeToMerge.Cells(1, 1).Value = cellValue
                    
                    If Not IsEmpty(wsMergeInfo.Cells(i, 3).Value) Then
                        rangeToMerge.NumberFormat = wsMergeInfo.Cells(i, 3).Value
                    End If
                End If
            Else ' Libellés
                rangeToMerge.Cells(1, 1).Value = wsMergeInfo.Cells(i, 2).Value
                If Not IsEmpty(wsMergeInfo.Cells(i, 3).Value) Then
                    rangeToMerge.NumberFormat = wsMergeInfo.Cells(i, 3).Value
                End If
            End If
        End If
    Next i
    
    ' Nettoyer
    GoTo CleanUp
    
ErrorHandler:
    MsgBox "Une erreur s'est produite : " & Err.Description, vbCritical
    
CleanUp:
    ' Supprimer la feuille temporaire si elle existe
    If Not wsMergeInfo Is Nothing Then
        On Error Resume Next
        wsMergeInfo.Visible = xlSheetVisible
        Application.DisplayAlerts = False
        wsMergeInfo.Delete
        Application.DisplayAlerts = True
        On Error GoTo 0
    End If
    
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    
    ' Message de confirmation
    MsgBox "Optimisation de l'affichage terminée." & vbCrLf & _
           "Nombre de numéros supprimés : " & nbSuppression, _
           vbInformation, "Optimisation Façade"
End Sub

Sub InsererImagesDansCellulesVides()
    Dim ws As Worksheet
    Dim rng As Range, cell As Range
    Dim chemin As String
    Dim img As Shape
    Dim largeurCell As Double, hauteurCell As Double
    Dim posX As Double, posY As Double
    Dim compteurImages As Integer
    Dim cellulesVides As Integer
    Dim maxImages As Integer
    
    ' Définir la feuille active
    Set ws = ActiveSheet
    
    If ws Is Nothing Then
        MsgBox "Aucune feuille active détectée.", vbExclamation
        Exit Sub
    End If
    
    ' Définir la plage (ajustez selon vos besoins)
    On Error Resume Next
    Set rng = ws.Range("A1:Z72")
    If rng Is Nothing Then
        Set rng = ws.UsedRange
    End If
    On Error GoTo 0
    
    ' Demander le chemin de l'image
    chemin = Application.GetOpenFilename("Images (*.jpg;*.jpeg;*.png;*.bmp;*.gif),*.jpg;*.jpeg;*.png;*.bmp;*.gif", , "Sélectionner une image")
    
    ' Vérifier la sélection
    If chemin = "False" Or chemin = "" Then
        MsgBox "Aucune image sélectionnée.", vbExclamation
        Exit Sub
    End If
    
    ' Vérifier l'existence du fichier
    If Dir(chemin) = "" Then
        MsgBox "Le fichier image n'existe pas : " & chemin, vbExclamation
        Exit Sub
    End If
    
    ' Confirmation avec limite de sécurité
    maxImages = 100 ' Limite de sécurité
    If MsgBox("Voulez-vous insérer l'image sélectionnée dans les cellules vides ?" & vbCrLf & _
              "Fichier : " & chemin & vbCrLf & _
              "Limite de sécurité : " & maxImages & " images maximum", _
              vbQuestion + vbYesNo, "Confirmation") = vbNo Then
        Exit Sub
    End If
    
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.Calculation = xlCalculationManual
    
    compteurImages = 0
    cellulesVides = 0
    
    On Error GoTo ErrorHandler
    
    ' Parcourir chaque cellule
    For Each cell In rng
        ' Arrêter si on atteint la limite de sécurité
        If compteurImages >= maxImages Then
            MsgBox "Limite de sécurité atteinte (" & maxImages & " images). Arrêt du processus.", vbWarning
            Exit For
        End If
        
        ' Vérifier si la cellule est vide
        If IsEmpty(cell.Value) Or Len(Trim(CStr(cell.Value))) = 0 Then
            cellulesVides = cellulesVides + 1
            
            If cell.MergeCells Then
                ' Cellule fusionnée - traiter seulement la première cellule de la fusion
                If cell.Address = cell.MergeArea.Cells(1, 1).Address Then
                    largeurCell = cell.MergeArea.Width
                    hauteurCell = cell.MergeArea.Height
                    posX = cell.MergeArea.Left
                    posY = cell.MergeArea.Top
                    
                    ' Insérer l'image
                    Set img = ws.Shapes.AddPicture(Filename:=chemin, _
                                                   LinkToFile:=msoFalse, _
                                                   SaveWithDocument:=msoTrue, _
                                                   Left:=posX, Top:=posY, _
                                                   Width:=largeurCell * 0.8, _
                                                   Height:=hauteurCell * 0.8)
                    
                    If Not img Is Nothing Then
                        With img
                            ' Centrer l'image
                            .Left = posX + (largeurCell - .Width) / 2
                            .Top = posY + (hauteurCell - .Height) / 2
                            .Placement = xlMoveAndSize
                            .Name = "AutoImage_" & compteurImages + 1
                        End With
                        compteurImages = compteurImages + 1
                        Set img = Nothing
                    End If
                End If
            Else
                ' Cellule simple
                largeurCell = cell.Width
                hauteurCell = cell.Height
                posX = cell.Left
                posY = cell.Top
                
                ' Vérifier que la cellule a une taille raisonnable
                If largeurCell > 5 And hauteurCell > 5 Then
                    Set img = ws.Shapes.AddPicture(Filename:=chemin, _
                                                   LinkToFile:=msoFalse, _
                                                   SaveWithDocument:=msoTrue, _
                                                   Left:=posX, Top:=posY, _
                                                   Width:=largeurCell * 0.8, _
                                                   Height:=hauteurCell * 0.8)
                    
                    If Not img Is Nothing Then
                        With img
                            ' Centrer l'image
                            .Left = posX + (largeurCell - .Width) / 2
                            .Top = posY + (hauteurCell - .Height) / 2
                            .Placement = xlMoveAndSize
                            .Name = "AutoImage_" & compteurImages + 1
                        End With
                        compteurImages = compteurImages + 1
                        Set img = Nothing
                    End If
                End If
            End If
        End If
    Next cell
    
    GoTo CleanUp
    
ErrorHandler:
    MsgBox "Erreur lors de l'insertion d'image : " & Err.Description & vbCrLf & _
           "Images insérées avant l'erreur : " & compteurImages, vbExclamation
    
CleanUp:
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.Calculation = xlCalculationAutomatic
    
    ' Message de résultat
    MsgBox "Insertion d'images terminée :" & vbCrLf & _
           "Cellules vides trouvées : " & cellulesVides & vbCrLf & _
           "Images insérées : " & compteurImages, vbInformation, "Résultat"
End Sub

' Fonction utilitaire pour nettoyer les images automatiques
Sub SupprimerImagesAutomatiques()
    Dim ws As Worksheet
    Dim shp As Shape
    Dim compteur As Integer
    
    Set ws = ActiveSheet
    compteur = 0
    
    Application.ScreenUpdating = False
    
    ' Parcourir toutes les formes en ordre inverse pour éviter les problèmes d'index
    Dim i As Integer
    For i = ws.Shapes.Count To 1 Step -1
        Set shp = ws.Shapes(i)
        If Left(shp.Name, 10) = "AutoImage_" Then
            shp.Delete
            compteur = compteur + 1
        End If
    Next i
    
    Application.ScreenUpdating = True
    
    MsgBox "Images automatiques supprimées : " & compteur, vbInformation
End Sub

' Fonction pour appeler NomOngletActif si elle existe
Sub AppelerNomOngletActif()
    On Error Resume Next
    Call NomOngletActif
    On Error GoTo 0
End Sub
