Sub OptimiserAffichageFacade()
    ' Déclaration des variables
    Dim ws As Worksheet
    Dim dictLibelles As Object
    Dim cell As Range
    Dim cellMerge As Range
    Dim i As Long, j As Long
    Dim nbSuppression As Long
    Dim wsMergeInfo As Worksheet
    Dim ligneMerge As Long
    Dim cellsToEmpty As Object
    Dim tempSheetName As String
    Dim sheetExists As Boolean
    Dim counter As Integer
    
    ' Initialisation
    Set ws = ActiveSheet
    Set dictLibelles = CreateObject("Scripting.Dictionary")
    Set cellsToEmpty = CreateObject("Scripting.Dictionary")
    nbSuppression = 0
    
    ' Vérifier qu'on a une feuille active
    If ws Is Nothing Then
        MsgBox "Aucune feuille active détectée.", vbExclamation
        Exit Sub
    End If
    
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    ' Créer une feuille temporaire avec un nom unique
    tempSheetName = "TempMergeInfo"
    counter = 0
    
    Do
        sheetExists = False
        Dim wsTest As Worksheet
        On Error Resume Next
        Set wsTest = ThisWorkbook.Worksheets(tempSheetName)
        If Not wsTest Is Nothing Then
            sheetExists = True
            Set wsTest = Nothing
        End If
        On Error GoTo 0
        
        If sheetExists Then
            counter = counter + 1
            tempSheetName = "TempMergeInfo" & counter
        End If
    Loop While sheetExists
    
    ' Créer la feuille temporaire
    On Error GoTo ErrorHandler
    Set wsMergeInfo = ThisWorkbook.Worksheets.Add
    wsMergeInfo.Name = tempSheetName
    wsMergeInfo.Visible = xlSheetVeryHidden
    
    ' ÉTAPE 1: Stocker les informations de fusion
    ligneMerge = 1
    For Each cell In ws.UsedRange
        If cell.MergeCells Then
            If cell.Address = cell.MergeArea.Cells(1, 1).Address Then
                wsMergeInfo.Cells(ligneMerge, 1).Value = cell.MergeArea.Address
                
                ' Stocker la valeur avec gestion spéciale pour les numéros
                If cell.Row Mod 2 = 1 Then ' Ligne impaire (numéro)
                    wsMergeInfo.Cells(ligneMerge, 2).Value = "'" & CStr(cell.Value)
                    wsMergeInfo.Cells(ligneMerge, 3).Value = cell.NumberFormat
                Else ' Ligne paire (libellé)
                    wsMergeInfo.Cells(ligneMerge, 2).Value = cell.Value
                    wsMergeInfo.Cells(ligneMerge, 3).Value = cell.NumberFormat
                End If
                
                ligneMerge = ligneMerge + 1
            End If
        End If
    Next cell
    
    ' ÉTAPE 2: Préparation pour la défusion
    Dim mergeDict As Object
    Dim formatDict As Object
    Set mergeDict = CreateObject("Scripting.Dictionary")
    Set formatDict = CreateObject("Scripting.Dictionary")
    
    ' Stocker les informations sur les libellés de voie fusionnés
    For Each cell In ws.UsedRange
        If cell.Row Mod 2 = 0 Then  ' Ligne paire (libellé de voie)
            If cell.MergeCells Then
                If cell.Address = cell.MergeArea.Cells(1, 1).Address Then
                    For Each cellMerge In cell.MergeArea
                        Dim cellAboveCheck As Range
                        Set cellAboveCheck = ws.Cells(cellMerge.Row - 1, cellMerge.Column)
                        
                        If Not IsEmpty(cellAboveCheck.Value) And cellAboveCheck.Value <> "" Then
                            If Not mergeDict.Exists(cellMerge.Address) Then
                                mergeDict.Add cellMerge.Address, cell.Value
                                formatDict.Add cellMerge.Address, cell.NumberFormat
                            End If
                        End If
                    Next cellMerge
                End If
            End If
        End If
    Next cell
    
    ' Défusionner toutes les cellules
    ws.UsedRange.UnMerge
    
    ' Restaurer les valeurs dans les cellules concernées
    Dim addr As Variant
    For Each addr In mergeDict.Keys
        ws.Range(addr).Value = mergeDict(addr)
        If formatDict.Exists(addr) Then
            ws.Range(addr).NumberFormat = formatDict(addr)
        End If
    Next addr
    
    ' ÉTAPE 3: Compter les occurrences de chaque libellé
    For Each cell In ws.UsedRange
        If cell.Row Mod 2 = 0 Then  ' Ligne paire (libellé de voie)
            If Not IsEmpty(cell.Value) And cell.Value <> "" Then
                Dim cleanedValue As String
                cleanedValue = Trim(CStr(cell.Value))
                
                ' Exclure les valeurs numériques
                If Not IsNumeric(cleanedValue) And cleanedValue <> "" Then
                    Dim cellAbove As Range
                    Set cellAbove = ws.Cells(cell.Row - 1, cell.Column)
                    
                    ' Ne compter que si la cellule du dessus n'est pas vide
                    If Not IsEmpty(cellAbove.Value) And cellAbove.Value <> "" Then
                        If dictLibelles.Exists(cleanedValue) Then
                            dictLibelles(cleanedValue) = dictLibelles(cleanedValue) + 1
                        Else
                            dictLibelles.Add cleanedValue, 1
                        End If
                    End If
                End If
            End If
        End If
    Next cell
    
    ' ÉTAPE 4: Identifier les numéros à supprimer pour les libellés uniques
    For Each cell In ws.UsedRange
        If cell.Row Mod 2 = 0 Then  ' Ligne paire (libellé de voie)
            If Not IsEmpty(cell.Value) And cell.Value <> "" Then
                Dim libelle As String
                libelle = Trim(CStr(cell.Value))
                
                If Not IsNumeric(libelle) And libelle <> "" Then
                    Set cellAbove = ws.Cells(cell.Row - 1, cell.Column)
                    
                    If Not IsEmpty(cellAbove.Value) And cellAbove.Value <> "" Then
                        ' Si ce libellé est unique
                        If dictLibelles.Exists(libelle) And dictLibelles(libelle) = 1 Then
                            If cellAbove.Row Mod 2 = 1 Then ' Vérifier que c'est bien un numéro
                                If Not cellsToEmpty.Exists(cellAbove.Address) Then
                                    cellsToEmpty.Add cellAbove.Address, True
                                    nbSuppression = nbSuppression + 1
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        End If
    Next cell
    
    ' ÉTAPE 5: Mettre à jour la feuille temporaire
    For i = 1 To ligneMerge - 1
        If Not IsEmpty(wsMergeInfo.Cells(i, 1).Value) Then
            Dim mergeRange As Range
            Set mergeRange = ws.Range(wsMergeInfo.Cells(i, 1).Value)
            
            If cellsToEmpty.Exists(mergeRange.Cells(1, 1).Address) Then
                wsMergeInfo.Cells(i, 2).Value = ""
            End If
        End If
    Next i
    
    ' ÉTAPE 6: Vider les cellules marquées
    Dim adresse As Variant
    For Each adresse In cellsToEmpty.Keys
        ws.Range(adresse).Value = ""
    Next adresse
    
    ' ÉTAPE 7: Restaurer les fusions
    For i = 1 To ligneMerge - 1
        If Not IsEmpty(wsMergeInfo.Cells(i, 1).Value) Then
            Dim rangeToMerge As Range
            Set rangeToMerge = ws.Range(wsMergeInfo.Cells(i, 1).Value)
            
            rangeToMerge.Merge
            
            If rangeToMerge.Row Mod 2 = 1 Then ' Numéros
                If Not IsEmpty(wsMergeInfo.Cells(i, 2).Value) Then
                    Dim cellValue As String
                    cellValue = CStr(wsMergeInfo.Cells(i, 2).Value)
                    If Left(cellValue, 1) = "'" Then
                        cellValue = Mid(cellValue, 2)
                    End If
                    
                    rangeToMerge.NumberFormat = "@"
                    rangeToMerge.Cells(1, 1).Value = cellValue
                    
                    If Not IsEmpty(wsMergeInfo.Cells(i, 3).Value) Then
                        rangeToMerge.NumberFormat = wsMergeInfo.Cells(i, 3).Value
                    End If
                End If
            Else ' Libellés
                rangeToMerge.Cells(1, 1).Value = wsMergeInfo.Cells(i, 2).Value
                If Not IsEmpty(wsMergeInfo.Cells(i, 3).Value) Then
                    rangeToMerge.NumberFormat = wsMergeInfo.Cells(i, 3).Value
                End If
            End If
        End If
    Next i
    
    ' Nettoyer
    GoTo CleanUp
    
ErrorHandler:
    MsgBox "Une erreur s'est produite : " & Err.Description, vbCritical
    
CleanUp:
    ' Supprimer la feuille temporaire si elle existe
    If Not wsMergeInfo Is Nothing Then
        On Error Resume Next
        wsMergeInfo.Visible = xlSheetVisible
        Application.DisplayAlerts = False
        wsMergeInfo.Delete
        Application.DisplayAlerts = True
        On Error GoTo 0
    End If
    
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    
    ' Message de confirmation
    MsgBox "Optimisation de l'affichage terminée." & vbCrLf & _
           "Nombre de numéros supprimés : " & nbSuppression, _
           vbInformation, "Optimisation Façade"
End Sub

' Fonction pour identifier les cases multivoies (CORRIGÉE)
Function IdentifierCasesMultivoies(ws As Worksheet) As Object
    Dim dictMultivoies As Object
    Dim cell As Range
    Dim numeroPDI As String
    Dim voie As String
    Dim cellBelow As Range
    
    Set dictMultivoies = CreateObject("Scripting.Dictionary")
    
    ' Analyser chaque cellule individuellement pour détecter les vraies cases multivoies
    For Each cell In ws.UsedRange
        If cell.Row Mod 2 = 1 Then ' Lignes impaires (numéros PDI)
            If Not IsEmpty(cell.Value) And cell.Value <> "" Then
                numeroPDI = Trim(CStr(cell.Value))
                
                ' Vérifier la cellule en dessous pour la voie
                Set cellBelow = ws.Cells(cell.Row + 1, cell.Column)
                If Not IsEmpty(cellBelow.Value) And cellBelow.Value <> "" Then
                    voie = Trim(CStr(cellBelow.Value))
                    
                    ' Ne pas traiter les valeurs numériques comme des voies
                    If Not IsNumeric(voie) Then
                        ' LOGIQUE CORRIGÉE: Vérifier si cette cellule spécifique contient plusieurs voies
                        Dim estMultivoie As Boolean
                        estMultivoie = False
                        
                        ' Méthode 1: Détecter les séparateurs dans la voie (point-virgule, virgule, etc.)
                        If InStr(voie, ";") > 0 Or InStr(voie, ",") > 0 Or InStr(voie, " / ") > 0 Or InStr(voie, " et ") > 0 Then
                            estMultivoie = True
                        End If
                        
                        ' Méthode 2: Vérifier si la cellule fait partie d'une fusion qui englobe plusieurs voies distinctes
                        If Not estMultivoie And cellBelow.MergeCells Then
                            estMultivoie = AnalyserFusionMultivoies(ws, cellBelow)
                        End If
                        
                        ' Méthode 3: Détecter les cases avec même numéro PDI mais dans des colonnes adjacentes avec voies différentes
                        If Not estMultivoie Then
                            estMultivoie = DetecterVoisinsMultivoies(ws, cell, numeroPDI)
                        End If
                        
                        ' Si cette case spécifique est multivoie, l'ajouter au dictionnaire
                        If estMultivoie Then
                            dictMultivoies.Add cell.Address, voie
                        End If
                    End If
                End If
            End If
        End If
    Next cell
    
    Set IdentifierCasesMultivoies = dictMultivoies
End Function

' Fonction auxiliaire pour analyser les fusions multivoies
Function AnalyserFusionMultivoies(ws As Worksheet, cellVoie As Range) As Boolean
    Dim cellFusion As Range
    Dim voiesDistinctes As Object
    Dim voie As String
    
    Set voiesDistinctes = CreateObject("Scripting.Dictionary")
    
    ' Analyser toutes les cellules dans la zone de fusion
    For Each cellFusion In cellVoie.MergeArea
        If cellFusion.Row Mod 2 = 0 Then ' Lignes paires (voies)
            If Not IsEmpty(cellFusion.Value) And cellFusion.Value <> "" Then
                voie = Trim(CStr(cellFusion.Value))
                If Not IsNumeric(voie) And Not voiesDistinctes.Exists(voie) Then
                    voiesDistinctes.Add voie, True
                End If
            End If
        End If
    Next cellFusion
    
    ' Si plus d'une voie distincte trouvée dans la fusion, c'est multivoie
    AnalyserFusionMultivoies = (voiesDistinctes.Count > 1)
End Function

' Fonction auxiliaire pour détecter les voisins avec voies différentes
Function DetecterVoisinsMultivoies(ws As Worksheet, cellNum As Range, numeroPDI As String) As Boolean
    Dim colGauche As Integer, colDroite As Integer
    Dim cellGauche As Range, cellDroite As Range
    Dim voieActuelle As String, voieGauche As String, voieDroite As String
    
    ' Obtenir la voie de la cellule actuelle
    voieActuelle = Trim(CStr(ws.Cells(cellNum.Row + 1, cellNum.Column).Value))
    
    ' Vérifier les colonnes adjacentes
    colGauche = cellNum.Column - 1
    colDroite = cellNum.Column + 1
    
    ' Vérifier à gauche
    If colGauche >= 1 Then
        Set cellGauche = ws.Cells(cellNum.Row, colGauche)
        If Not IsEmpty(cellGauche.Value) And Trim(CStr(cellGauche.Value)) = numeroPDI Then
            voieGauche = Trim(CStr(ws.Cells(cellNum.Row + 1, colGauche).Value))
            If voieGauche <> "" And voieGauche <> voieActuelle And Not IsNumeric(voieGauche) Then
                DetecterVoisinsMultivoies = True
                Exit Function
            End If
        End If
    End If
    
    ' Vérifier à droite
    If colDroite <= ws.Columns.Count Then
        Set cellDroite = ws.Cells(cellNum.Row, colDroite)
        If Not IsEmpty(cellDroite.Value) And Trim(CStr(cellDroite.Value)) = numeroPDI Then
            voieDroite = Trim(CStr(ws.Cells(cellNum.Row + 1, colDroite).Value))
            If voieDroite <> "" And voieDroite <> voieActuelle And Not IsNumeric(voieDroite) Then
                DetecterVoisinsMultivoies = True
                Exit Function
            End If
        End If
    End If
    
    DetecterVoisinsMultivoies = False
End Function

' Fonction pour appliquer les hachures aux cases multivoies (AMÉLIORÉE)
Sub AppliquerHachuresMultivoies(ws As Worksheet)
    Dim dictMultivoies As Object
    Dim cell As Range
    Dim adresse As Variant
    Dim compteur As Integer
    
    ' Validation avant application
    If Not ValiderAvantHachures(ws) Then
        Exit Sub
    End If
    
    ' Identifier les cases multivoies (nouvelle logique corrigée)
    Set dictMultivoies = IdentifierCasesMultivoies(ws)
    
    Application.ScreenUpdating = False
    compteur = 0
    
    ' Appliquer les hachures aux cases multivoies
    For Each adresse In dictMultivoies.Keys
        Set cell = ws.Range(adresse)
        
        ' Appliquer le motif de hachures
        With cell.Interior
            .Pattern = xlPatternLightDown
            .PatternColor = RGB(150, 150, 150)
            .Color = RGB(255, 255, 255)
        End With
        
        ' Renforcer la bordure
        With cell.Borders
            .LineStyle = xlContinuous
            .Weight = xlMedium
            .Color = RGB(100, 100, 100)
        End With
        
        compteur = compteur + 1
    Next adresse
    
    Application.ScreenUpdating = True
    
    MsgBox "Hachures appliquées à " & compteur & " cases multivoies." & vbCrLf & _
           "Seules les cases réellement multivoies ont été hachurées.", _
           vbInformation, "Hachures Multivoies - Corrigé"
End Sub

' Fonction utilitaire pour supprimer les hachures multivoies
Sub SupprimerHachuresMultivoies(ws As Worksheet)
    Dim cell As Range
    Dim compteur As Integer
    
    Application.ScreenUpdating = False
    compteur = 0
    
    ' Parcourir toutes les cellules et supprimer les hachures
    For Each cell In ws.UsedRange
        If cell.Row Mod 2 = 1 Then ' Lignes impaires (numéros PDI)
            If cell.Interior.Pattern = xlPatternLightDown Then
                ' Remettre le formatage par défaut
                With cell.Interior
                    .Pattern = xlNone
                    .Color = xlNone
                End With
                
                ' Remettre les bordures par défaut
                With cell.Borders
                    .LineStyle = xlContinuous
                    .Weight = xlThin
                    .Color = RGB(0, 0, 0)
                End With
                
                compteur = compteur + 1
            End If
        End If
    Next cell
    
    Application.ScreenUpdating = True
    
    MsgBox "Hachures supprimées de " & compteur & " cases.", vbInformation, "Suppression Hachures"
End Sub

Sub InsererImagesDansCellulesVides()
    Dim ws As Worksheet
    Dim rng As Range, cell As Range
    Dim chemin As String
    Dim img As Shape
    Dim largeurCell As Double, hauteurCell As Double
    Dim posX As Double, posY As Double
    Dim compteurImages As Integer
    Dim cellulesVides As Integer
    Dim maxImages As Integer
    Dim derniereLigne As Long
    
    ' Définir la feuille active
    Set ws = ActiveSheet
    
    If ws Is Nothing Then
        MsgBox "Aucune feuille active détectée.", vbExclamation
        Exit Sub
    End If
    
    ' Trouver la dernière ligne non vide dans les colonnes A à Z
    derniereLigne = 1
    Dim col As Integer
    For col = 1 To 26 ' Colonnes A à Z
        Dim derniereLigneCol As Long
        derniereLigneCol = ws.Cells(ws.Rows.Count, col).End(xlUp).Row
        If derniereLigneCol > derniereLigne Then
            derniereLigne = derniereLigneCol
        End If
    Next col
    
    ' Définir la plage de la façade casier : colonnes A à Z jusqu'à la dernière ligne non vide
    Set rng = ws.Range("A1:Z" & derniereLigne)
    
    ' Demander le chemin de l'image
    chemin = Application.GetOpenFilename("Images (*.jpg;*.jpeg;*.png;*.bmp;*.gif),*.jpg;*.jpeg;*.png;*.bmp;*.gif", , "Sélectionner une image")
    
    ' Vérifier la sélection
    If chemin = "False" Or chemin = "" Then
        MsgBox "Aucune image sélectionnée.", vbExclamation
        Exit Sub
    End If
    
    ' Vérifier l'existence du fichier
    If Dir(chemin) = "" Then
        MsgBox "Le fichier image n'existe pas : " & chemin, vbExclamation
        Exit Sub
    End If
    
    ' Confirmation avec informations sur la zone de traitement
    maxImages = 500 ' Limite augmentée pour les grandes façades
    If MsgBox("Insertion d'images dans la façade casier :" & vbCrLf & _
              "Zone : Colonnes A à Z, lignes 1 à " & derniereLigne & vbCrLf & _
              "Fichier : " & chemin & vbCrLf & _
              "L'image conservera ses dimensions originales." & vbCrLf & _
              "Continuer ?", _
              vbQuestion + vbYesNo, "Confirmation - Façade Casier") = vbNo Then
        Exit Sub
    End If
    
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.Calculation = xlCalculationManual
    
    compteurImages = 0
    cellulesVides = 0
    
    On Error GoTo ErrorHandler
    
    ' Parcourir chaque cellule dans la zone façade casier
    For Each cell In rng
        ' Arrêter si on atteint la limite de sécurité
        If compteurImages >= maxImages Then
            MsgBox "Limite de sécurité atteinte (" & maxImages & " images). Arrêt du processus.", vbWarning
            Exit For
        End If
        
        ' Vérifier si la cellule est vide
        If IsEmpty(cell.Value) Or Len(Trim(CStr(cell.Value))) = 0 Then
            cellulesVides = cellulesVides + 1
            
            If cell.MergeCells Then
                ' Cellule fusionnée - traiter seulement la première cellule de la fusion
                If cell.Address = cell.MergeArea.Cells(1, 1).Address Then
                    largeurCell = cell.MergeArea.Width
                    hauteurCell = cell.MergeArea.Height
                    posX = cell.MergeArea.Left
                    posY = cell.MergeArea.Top
                    
                    ' Insérer l'image avec ses dimensions originales
                    Set img = ws.Shapes.AddPicture(Filename:=chemin, _
                                                   LinkToFile:=msoFalse, _
                                                   SaveWithDocument:=msoTrue, _
                                                   Left:=posX, Top:=posY, _
                                                   Width:=-1, Height:=-1)
                    
                    If Not img Is Nothing Then
                        With img
                            ' Centrer l'image dans la zone fusionnée sans changer ses dimensions
                            .Left = posX + (largeurCell - .Width) / 2
                            .Top = posY + (hauteurCell - .Height) / 2
                            .Placement = xlMoveAndSize
                            .Name = "FacadeImage_" & compteurImages + 1
                        End With
                        compteurImages = compteurImages + 1
                        Set img = Nothing
                    End If
                End If
            Else
                ' Cellule simple
                largeurCell = cell.Width
                hauteurCell = cell.Height
                posX = cell.Left
                posY = cell.Top
                
                ' Vérifier que la cellule a une taille raisonnable
                If largeurCell > 5 And hauteurCell > 5 Then
                    ' Insérer l'image avec ses dimensions originales
                    Set img = ws.Shapes.AddPicture(Filename:=chemin, _
                                                   LinkToFile:=msoFalse, _
                                                   SaveWithDocument:=msoTrue, _
                                                   Left:=posX, Top:=posY, _
                                                   Width:=-1, Height:=-1)
                    
                    If Not img Is Nothing Then
                        With img
                            ' Centrer l'image dans la cellule sans changer ses dimensions
                            .Left = posX + (largeurCell - .Width) / 2
                            .Top = posY + (hauteurCell - .Height) / 2
                            .Placement = xlMoveAndSize
                            .Name = "FacadeImage_" & compteurImages + 1
                        End With
                        compteurImages = compteurImages + 1
                        Set img = Nothing
                    End If
                End If
            End If
        End If
    Next cell
    
    GoTo CleanUp
    
ErrorHandler:
    MsgBox "Erreur lors de l'insertion d'image : " & Err.Description & vbCrLf & _
           "Images insérées avant l'erreur : " & compteurImages, vbExclamation
    
CleanUp:
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.Calculation = xlCalculationAutomatic
    
    ' Message de résultat
    MsgBox "Insertion d'images dans la façade casier terminée :" & vbCrLf & _
           "Zone traitée : A1:Z" & derniereLigne & vbCrLf & _
           "Cellules vides trouvées : " & cellulesVides & vbCrLf & _
           "Images insérées : " & compteurImages, vbInformation, "Résultat - Façade Casier"
End Sub

' Fonction utilitaire pour nettoyer les images de façade automatiques
Sub SupprimerImagesFacade()
    Dim ws As Worksheet
    Dim shp As Shape
    Dim compteur As Integer
    
    Set ws = ActiveSheet
    compteur = 0
    
    Application.ScreenUpdating = False
    
    ' Parcourir toutes les formes en ordre inverse pour éviter les problèmes d'index
    Dim i As Integer
    For i = ws.Shapes.Count To 1 Step -1
        Set shp = ws.Shapes(i)
        If Left(shp.Name, 12) = "FacadeImage_" Then
            shp.Delete
            compteur = compteur + 1
        End If
    Next i
    
    Application.ScreenUpdating = True
    
    MsgBox "Images de façade supprimées : " & compteur, vbInformation
End Sub

' Fonction de diagnostic pour valider la détection des cases multivoies
Sub DiagnostiquerCasesMultivoies()
    Dim ws As Worksheet
    Dim dictMultivoies As Object
    Dim adresse As Variant
    Dim cell As Range
    Dim cellBelow As Range
    Dim rapport As String
    Dim compteur As Integer
    
    Set ws = ActiveSheet
    
    If ws Is Nothing Then
        MsgBox "Aucune feuille active détectée.", vbExclamation
        Exit Sub
    End If
    
    ' Obtenir les cases multivoies détectées
    Set dictMultivoies = IdentifierCasesMultivoies(ws)
    
    rapport = "DIAGNOSTIC DES CASES MULTIVOIES" & vbCrLf & vbCrLf
    rapport = rapport & "Cases détectées comme multivoies : " & dictMultivoies.Count & vbCrLf & vbCrLf
    
    If dictMultivoies.Count = 0 Then
        rapport = rapport & "Aucune case multivoie détectée."
    Else
        compteur = 0
        For Each adresse In dictMultivoies.Keys
            compteur = compteur + 1
            Set cell = ws.Range(adresse)
            Set cellBelow = ws.Cells(cell.Row + 1, cell.Column)
            
            rapport = rapport & compteur & ". Case " & adresse & vbCrLf
            rapport = rapport & "   Numéro PDI : " & cell.Value & vbCrLf
            rapport = rapport & "   Voie(s) : " & cellBelow.Value & vbCrLf
            rapport = rapport & "   Raison : " & dictMultivoies(adresse) & vbCrLf & vbCrLf
            
            ' Limiter l'affichage pour éviter les messages trop longs
            If compteur >= 10 Then
                rapport = rapport & "... (et " & (dictMultivoies.Count - 10) & " autres)" & vbCrLf
                Exit For
            End If
        Next adresse
    End If
    
    rapport = rapport & vbCrLf & "Utilisez cette information pour vérifier si les détections sont correctes."
    
    MsgBox rapport, vbInformation, "Diagnostic Cases Multivoies"
End Sub

' Fonction de validation avant application des hachures
Function ValiderAvantHachures(ws As Worksheet) As Boolean
    Dim dictMultivoies As Object
    Dim reponse As VbMsgBoxResult
    
    Set dictMultivoies = IdentifierCasesMultivoies(ws)
    
    If dictMultivoies.Count = 0 Then
        MsgBox "Aucune case multivoie détectée. Aucune hachure ne sera appliquée.", vbInformation
        ValiderAvantHachures = False
        Exit Function
    End If
    
    reponse = MsgBox("Détection terminée :" & vbCrLf & _
                     "Nombre de cases multivoies trouvées : " & dictMultivoies.Count & vbCrLf & vbCrLf & _
                     "Souhaitez-vous voir le détail des cases détectées ?", _
                     vbQuestion + vbYesNoCancel, "Validation Hachures")
    
    Select Case reponse
        Case vbYes
            ' Afficher le diagnostic détaillé
            Call DiagnostiquerCasesMultivoies
            
            ' Demander confirmation après le diagnostic
            reponse = MsgBox("Après avoir vu le diagnostic, souhaitez-vous appliquer les hachures ?", _
                             vbQuestion + vbYesNo, "Confirmation Hachures")
            ValiderAvantHachures = (reponse = vbYes)
            
        Case vbNo
            ' Appliquer directement les hachures
            ValiderAvantHachures = True
            
        Case vbCancel
            ' Annuler l'opération
            ValiderAvantHachures = False
    End Select
End Function

' Fonction pour appeler NomOngletActif si elle existe
Sub AppelerNomOngletActif()
    On Error Resume Next
    Call NomOngletActif
    On Error GoTo 0
End Sub
