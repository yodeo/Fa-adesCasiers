Sub GenererFacadePDI()
    '=====================================================
    ' MACRO : Génération automatique d'une façade de casiers PDI
    ' MODIFICATION : La source est maintenant la feuille active, et non plus "Accueil".
    ' Destination : Nouvelle feuille nommée avec le nom de la tournée + "Fac"
    '=====================================================
    
    Dim wsSource As Worksheet, wsDest As Worksheet
    Dim derniereLigne As Long, i As Long
    Dim numPDI As String, Observations As String, nomVoie As String
    Dim largeurPDI As Integer
    Dim ligneActuelle As Long, colonneActuelle As Long
    Dim rngHaut As Range, rngBas As Range, rngCaisson As Range
    Dim valeurLargeur As Variant
    Dim dictCouleurs As Object
    Dim paletteCouleurs As Object
    Dim couleurActuelle As Long
    Dim indexCouleur As Integer
    
    ' Variables pour la gestion des caissons
    Dim maxParCaisson As Integer
    Dim compteurDansCaisson As Integer
    Dim numeroCaisson As Integer
    Dim lettreCaisson As String
    Dim codeCaisson As String
    Dim horsCapacitePermanent As Boolean ' Variable pour tracker le dépassement permanent
    
    ' Variables pour l'accumulation
    Dim blocEnCours As Boolean
    Dim numAccumule As String
    Dim obsAccumulees As String
    Dim voieAccumulee As String
    Dim largeurBloc As Integer
    
    ' Variables pour la mise à jour des codes caisson en temps réel
    Dim dictMiseAJourCodes As Object
    Dim dictLignesHorsCapacite As Object ' Pour stocker les lignes qui dépassent
    Dim ligneSourceActuelle As Long
    
    ' NOUVELLE VARIABLE : Nom de la tournée et nom de la feuille destination
    Dim nomTournee As String
    Dim nomFeuilleDestination As String
    
    ' Désactiver les mises à jour écran pour améliorer les performances
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    ' NETTOYER LE MENU CONTEXTUEL AVANT DE COMMENCER
    Call SupprimerOptionMenuContextuel
    
    ' Créer un dictionnaire pour gérer les couleurs par nom de voie
    Set dictCouleurs = CreateObject("Scripting.Dictionary")
    
    ' Créer la palette de couleurs étendues
    Set paletteCouleurs = CreateObject("Scripting.Dictionary")
    Call InitialiserPaletteCouleursEtendues(paletteCouleurs)
    indexCouleur = 0
    
    ' Créer un dictionnaire pour stocker les codes caisson à mettre à jour
    Set dictMiseAJourCodes = CreateObject("Scripting.Dictionary")
    
    ' Créer un dictionnaire pour stocker les lignes hors capacité
    Set dictLignesHorsCapacite = CreateObject("Scripting.Dictionary")
    
    ' MODIFICATION : Définir la feuille source comme étant la feuille active
    Set wsSource = ActiveSheet
    
    ' NOUVELLE LOGIQUE : Récupérer le nom de la tournée depuis A1
    nomTournee = Trim(CStr(wsSource.Range("A1").Value))
    
    ' Si A1 est vide, utiliser le nom de la feuille source
    If nomTournee = "" Then
        nomTournee = wsSource.Name
    End If
    
    ' Nettoyer le nom de la tournée (supprimer les caractères non autorisés dans les noms de feuille)
    nomTournee = NettoyerNomFeuille(nomTournee)
    
    ' Construire le nom de la feuille destination
    nomFeuilleDestination = nomTournee & "Fac"
    
    ' S'assurer que le nom ne dépasse pas 31 caractères (limite Excel)
    If Len(nomFeuilleDestination) > 31 Then
        nomFeuilleDestination = Left(nomFeuilleDestination, 28) & "Fac"
    End If
    
    ' Récupérer la valeur max par caisson depuis C1 de la feuille active
    maxParCaisson = val(wsSource.Range("C1").Value)
    If maxParCaisson <= 0 Then maxParCaisson = 4 ' Valeur par défaut si C1 est vide ou invalide
    
    ' Initialiser les compteurs de caisson
    compteurDansCaisson = 1  ' Commence à 1, pas 0
    numeroCaisson = 1
    lettreCaisson = "A"
    horsCapacitePermanent = False ' Pas encore en dépassement
    
    ' Supprimer la feuille destination si elle existe déjà
    On Error Resume Next
    ThisWorkbook.Sheets(nomFeuilleDestination).Delete
    On Error GoTo 0
    
    ' Créer la nouvelle feuille destination après la feuille active
    Set wsDest = ThisWorkbook.Sheets.Add(After:=wsSource)
    wsDest.Name = nomFeuilleDestination
    
    ' Configurer les largeurs de colonnes
    wsDest.Columns("A:B").ColumnWidth = 5.57
    wsDest.Columns("Y:Z").ColumnWidth = 5.57
    wsDest.Columns("AA").ColumnWidth = 3.29
    wsDest.Columns("C:X").ColumnWidth = 4.29
    
    ' Trouver la dernière ligne avec des données dans la feuille source
    derniereLigne = wsSource.Cells(wsSource.Rows.Count, "A").End(xlUp).Row
    
    ' Initialiser les positions de départ
    ligneActuelle = 1
    colonneActuelle = 1
    blocEnCours = False
    
    ' PARCOURIR LES DONNÉES À PARTIR DE LA LIGNE 7
    i = 7
    Do While i <= derniereLigne
        ' Lire les données de la ligne actuelle depuis la feuille source
        numPDI = CStr(wsSource.Cells(i, 1).Text)
        nomVoie = CStr(wsSource.Cells(i, 2).Text)
        Observations = CStr(wsSource.Cells(i, 4).Text)
        valeurLargeur = wsSource.Cells(i, 7).Value
        largeurPDI = ConvertirEnEntier(valeurLargeur, 0)
        
        ' Lire la valeur de la colonne V pour le fond jaune
        Dim valeurColV As String
        valeurColV = CStr(wsSource.Cells(i, 22).Text) ' Colonne V = 22
        
        ' Lire le type PDI (colonne F)
        Dim typePDI As String
        typePDI = CStr(wsSource.Cells(i, 6).Text) ' Colonne F = 6
        
        ' Si on a une largeur > 0, c'est le début d'un nouveau bloc
        If largeurPDI > 0 Then
            ' Stocker la ligne source de début pour ce bloc
            ligneSourceActuelle = i
            
            ' Initialiser l'accumulation pour ce bloc
            numAccumule = numPDI
            obsAccumulees = Observations
            voieAccumulee = nomVoie
            largeurBloc = largeurPDI
            
            ' Variable pour savoir si c'est un bloc multi-voies
            Dim estMultiVoies As Boolean
            estMultiVoies = False
            
            ' Regarder les lignes suivantes pour accumulation
            Dim j As Long
            j = i + 1
            Do While j <= derniereLigne
                Dim largeurSuivante As Integer
                largeurSuivante = ConvertirEnEntier(wsSource.Cells(j, 7).Value, 0)
                
                ' Si largeur = 0, accumuler
                If largeurSuivante = 0 Then
                    Dim numSuivant As String, voieSuivante As String, obsSuivante As String
                    numSuivant = CStr(wsSource.Cells(j, 1).Text)
                    voieSuivante = CStr(wsSource.Cells(j, 2).Text)
                    obsSuivante = CStr(wsSource.Cells(j, 4).Text)
                    
                    ' Déterminer le séparateur pour les numéros
                    If voieSuivante <> voieAccumulee And voieSuivante <> "" Then
                        ' Voie différente : slash
                        numAccumule = numAccumule & " / " & numSuivant
                        estMultiVoies = True
                        ' Ajouter la voie si différente
                        If InStr(voieAccumulee, voieSuivante) = 0 Then
                            voieAccumulee = voieAccumulee & " / " & voieSuivante
                        End If
                    Else
                        ' Même voie : tiret
                        numAccumule = numAccumule & "-" & numSuivant
                    End If
                    
                    ' Accumuler les observations
                    If obsSuivante <> "" Then
                        If obsAccumulees = "" Then
                            obsAccumulees = obsSuivante
                        Else
                            obsAccumulees = obsAccumulees & " / " & obsSuivante
                        End If
                    End If
                    
                    ' Vérifier aussi la colonne V pour les lignes accumulées
                    If wsSource.Cells(j, 22).Text = "B" Then
                        valeurColV = "B"
                    End If
                    
                    ' Vérifier aussi le type PDI pour les lignes accumulées
                    If wsSource.Cells(j, 6).Text = "Bat P" Or wsSource.Cells(j, 6).Text = "Bat C" Then
                        typePDI = wsSource.Cells(j, 6).Text
                    End If
                    
                    j = j + 1
                Else
                    ' On a trouvé une largeur > 0, on arrête l'accumulation
                    Exit Do
                End If
            Loop
            
            ' Mettre à jour i pour sauter les lignes accumulées
            i = j - 1
            
            ' CRÉER LE BLOC PDI
            ' Vérifier la validité de la largeur
            If largeurBloc < 1 Then largeurBloc = 1
            If largeurBloc > 26 Then largeurBloc = 26
            
            ' Vérifier si on dépasse la colonne Z (26)
            If colonneActuelle + largeurBloc - 1 > 26 Then
                ' Ajouter le code caisson avant de passer à la ligne
                If colonneActuelle > 1 Then
                    ' Vérifier si le caisson actuel dépasse la capacité
                    Dim codeActuel As String
                    codeActuel = numeroCaisson & lettreCaisson
                    If horsCapacitePermanent Or CaissonDepasse(codeActuel, maxParCaisson) Then
                        Call AjouterCodeCaisson(wsDest, ligneActuelle, "HC")
                    Else
                        Call AjouterCodeCaisson(wsDest, ligneActuelle, codeActuel)
                    End If
                End If
                
                ligneActuelle = ligneActuelle + 2
                colonneActuelle = 1
                
                ' Incrémenter le compteur de caisson selon la nouvelle logique
                numeroCaisson = numeroCaisson + 1
                
                ' Si on dépasse maxParCaisson, on passe à la lettre suivante
                If numeroCaisson > maxParCaisson Then
                    numeroCaisson = 1
                    ' Passer à la lettre suivante
                    If lettreCaisson = "D" Then
                        ' Si on dépasse D, on est maintenant hors capacité de façon permanente
                        horsCapacitePermanent = True
                        ' On recommence à A mais on reste hors capacité
                        lettreCaisson = "A"
                    Else
                        lettreCaisson = Chr(Asc(lettreCaisson) + 1)
                        ' Vérifier si on vient d'atteindre le dépassement
                        If lettreCaisson > "D" And Not horsCapacitePermanent Then
                            horsCapacitePermanent = True
                            lettreCaisson = "A" ' Redémarre mais reste hors capacité
                            numeroCaisson = 1
                        End If
                    End If
                End If
            End If
            
            ' Calculer le code caisson complet pour ce PDI
            Dim codeCompletCaisson As String
            Dim numeroPosition As String
            Dim codeBaseCaisson As String
            
            ' Code de base du caisson (ex: "1A", "2B", etc.)
            codeBaseCaisson = numeroCaisson & lettreCaisson
            
            ' Vérifier si on dépasse la limite pour le fond rouge
            Dim fondRouge As Boolean
            fondRouge = horsCapacitePermanent Or CaissonDepasse(codeBaseCaisson, maxParCaisson)
            
            ' Calculer le numéro de position (format 01, 02, etc.)
            numeroPosition = Format(colonneActuelle, "00")
            codeCompletCaisson = codeBaseCaisson & " " & numeroPosition
            
            ' Stocker le code pour toutes les lignes de ce bloc (ligne principale + lignes accumulées)
            For k = ligneSourceActuelle To j - 1
                dictMiseAJourCodes.Add k, codeCompletCaisson
                ' Si c'est hors capacité, l'ajouter au dictionnaire des lignes à colorer
                If fondRouge Then
                    dictLignesHorsCapacite.Add k, True
                End If
            Next k
            
            ' Créer la cellule du haut (N° + Observations) - AVEC FORMATAGE DIFFÉRENCIÉ
            Set rngHaut = wsDest.Range(wsDest.Cells(ligneActuelle, colonneActuelle), _
                                        wsDest.Cells(ligneActuelle, colonneActuelle + largeurBloc - 1))
            rngHaut.Merge
            
            With rngHaut
                .NumberFormat = "@"
                
                ' Construire le texte avec symbole si nécessaire (SANS cercle blanc)
                Dim texteComplet As String
                Dim symbole As String
                symbole = ""
                
                
                ' Ajouter un symbole pour Bat P ou Bat C SEULEMENT
                If typePDI = "Bat P" Then
                    symbole = ChrW(&H25B2) & " " ' Triangle Unicode
                ElseIf typePDI = "Bat C" Then
                    symbole = ChrW(&H25B2) & " " ' Triangle Unicode
                End If

                
                ' Construction du texte avec formatage différencié et saut de ligne
                If obsAccumulees <> "" Then
                    ' Format : [Symbole] Numéro + SAUT DE LIGNE + Observations
                    texteComplet = symbole & numAccumule & vbCrLf & obsAccumulees
                Else
                    ' Format : [Symbole] Numéro seul
                    texteComplet = symbole & numAccumule
                End If
                
                .Value = texteComplet
                .HorizontalAlignment = xlCenter
                .VerticalAlignment = xlCenter
                .WrapText = True
                
                ' Bordures : toujours fines
                .Borders.LineStyle = xlContinuous
                .Borders.Weight = xlThin
                
                ' Priorité : rouge si dépasse > jaune si colonne V = "B" > pas de couleur
                If fondRouge Then
                    .Interior.Color = RGB(255, 0, 0) ' Rouge (priorité 1)
                    .Font.Color = RGB(255, 255, 255) ' Texte blanc sur fond rouge
                ElseIf valeurColV = "B" Then
                    .Interior.Color = RGB(255, 255, 0) ' Jaune (priorité 2)
                    .Font.Color = RGB(0, 0, 0) ' Texte noir sur fond jaune
                Else
                    .Interior.Pattern = xlNone ' Pas de couleur
                End If
            End With
            
            ' APPLIQUER LE FORMATAGE DIFFÉRENCIÉ POUR NUMÉROS VS OBSERVATIONS
            Call AppliquerFormatageDifferencie(rngHaut, symbole, numAccumule, obsAccumulees)
            
            ' Créer la cellule du bas (Nom de la voie) - AVEC LE CERCLE BLANC SI MULTI-VOIES
            Set rngBas = wsDest.Range(wsDest.Cells(ligneActuelle + 1, colonneActuelle), _
                                        wsDest.Cells(ligneActuelle + 1, colonneActuelle + largeurBloc - 1))
            rngBas.Merge
            
            ' Appliquer les abréviations au nom de voie
            Dim voieAbregee As String
            voieAbregee = AbregerTypeVoie(voieAccumulee)
            
            ' Construire le texte de la voie avec cercle blanc si multi-voies
            Dim texteVoie As String
            If estMultiVoies Then
                texteVoie = ChrW(&H25CB) & " " & voieAbregee ' Cercle blanc + nom de voie
            Else
                texteVoie = voieAbregee ' Nom de voie seul
            End If
            
            With rngBas
                .NumberFormat = "@"
                .Value = texteVoie ' Utiliser le texte avec ou sans cercle
            End With
            
            ' Gérer la couleur pour les voies
            If voieAccumulee <> "" Then
                ' Pour les voies multiples, utiliser la couleur de la première voie
                Dim premiereVoie As String
                Dim posSlash As Integer
                posSlash = InStr(voieAccumulee, " / ")
                If posSlash > 0 Then
                    premiereVoie = Left(voieAccumulee, posSlash - 1)
                Else
                    premiereVoie = voieAccumulee
                End If
                
                If Not dictCouleurs.Exists(premiereVoie) Then
                    ' Utiliser la nouvelle palette de couleurs étendues avec vérification d'adjacence
                    Dim couleurRGB As Long
                    couleurRGB = ObtenirCouleurDistinctePourVoieAvecAdjacence(premiereVoie, paletteCouleurs, dictCouleurs, colonneActuelle, wsDest, ligneActuelle)
                    dictCouleurs.Add premiereVoie, couleurRGB
                    indexCouleur = indexCouleur + 1
                End If
                couleurActuelle = dictCouleurs(premiereVoie)
            Else
                couleurActuelle = xlNone
            End If
            
            With rngBas
                .HorizontalAlignment = xlCenter
                .VerticalAlignment = xlCenter
                .Font.Bold = True
                .WrapText = True
                
                ' Souligner le texte si multi-voies
                If estMultiVoies Then
                    .Font.Underline = xlUnderlineStyleSingle
                End If
                
                ' Bordures : toujours fines
                .Borders.LineStyle = xlContinuous
                .Borders.Weight = xlThin
                
                If couleurActuelle <> xlNone Then
                    ' Priorité : rouge si dépasse > couleur normale
                    If fondRouge Then
                        .Interior.Color = RGB(255, 0, 0) ' Rouge (priorité 1)
                        .Font.Color = RGB(255, 255, 255) ' Texte blanc sur fond rouge
                    Else
                        ' Utiliser la couleur RGB de la nouvelle palette
                        .Interior.Color = couleurActuelle
                        .Font.Color = ObtenirCouleurTexteRGB(couleurActuelle)
                    End If
                Else
                    ' Même si pas de couleur de voie, appliquer le rouge si dépasse
                    If fondRouge Then
                        .Interior.Color = RGB(255, 0, 0) ' Rouge
                        .Font.Color = RGB(255, 255, 255) ' Texte blanc
                    End If
                End If
            End With
            
            ' Ajuster les hauteurs de lignes - CONSERVÉES COMME AVANT
            wsDest.Rows(ligneActuelle).RowHeight = 48.75
            wsDest.Rows(ligneActuelle + 1).RowHeight = 39
            
            ' AJUSTER LA TAILLE DE POLICE SELON LA LARGEUR DE LA CELLULE
            Call AjusterTaillePoliceSelonLargeur(rngHaut, largeurBloc) ' Échelle numéros PDI
            Call AjusterTaillePoliceVoiesSelonLargeur(rngBas, largeurBloc) ' Échelle noms de voies
            
            ' Avancer à la position suivante
            colonneActuelle = colonneActuelle + largeurBloc
        End If
        
        i = i + 1
    Loop
    
    ' Ajouter le code caisson pour la dernière ligne si nécessaire
    If colonneActuelle > 1 Then
        Dim codeFinal As String
        codeFinal = numeroCaisson & lettreCaisson
        If horsCapacitePermanent Or CaissonDepasse(codeFinal, maxParCaisson) Then
            Call AjouterCodeCaisson(wsDest, ligneActuelle, "HC")
        Else
            Call AjouterCodeCaisson(wsDest, ligneActuelle, codeFinal)
        End If
    End If
    
    ' METTRE À JOUR LA COLONNE H DE LA FEUILLE SOURCE AVEC LES CODES CALCULÉS ET COLORER LES LIGNES HORS CAPACITÉ
    Call MettreAJourColonneHAvecCouleur(wsSource, dictMiseAJourCodes, dictLignesHorsCapacite)
    
    ' Fusionner les cellules adjacentes avec le même nom de voie
    Call FusionnerVoiesAdjacentes(wsDest)
    
    ' Mettre à jour les cellules vides dans la feuille source
    ' Utiliser la colonne W pour stocker le nombre de cellules vides
    Call MettreAJourCellulesVides(wsSource, wsDest, "W")
    
    ' AJOUTER LES BOUTONS ET MENU CONTEXTUEL À LA FEUILLE FACADE_PDI
    Call AjouterBoutonsSeulement(wsDest)
    Call AjouterCodeMenuContextuel(wsDest)
    
    ' AJOUTER LE MENU CONTEXTUEL À LA FEUILLE SOURCE (navigation inverse)
    Call AjouterCodeMenuContextuelAccueil(wsSource)
    
    ' Masquer le quadrillage
    With wsDest
        ActiveWindow.DisplayGridlines = False
    End With
    
    ' Configuration finale de la feuille
    With wsDest.PageSetup
        .Orientation = xlLandscape
        .FitToPagesWide = 1
        .FitToPagesTall = False
        .CenterHorizontally = True
    End With
    
    
    
    ' Réactiver les mises à jour
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    
    wsDest.Activate
    
    ' NOUVEAU : Appeler la macro d'ajustement des paramètres d'impression
    ' avec une pause pour s'assurer que la feuille est bien créée
    DoEvents
    Application.Wait (Now + TimeValue("0:00:01"))
    
    ' Appeler la macro d'ajustement d'impression
    'Call AjusterParametresImpression
    
    'Call MettreEnFormeAccueil
    
    ' Appliquer les hachures multivoies
    'Call AppliquerHachuresMultivoies(wsDest)
    
    ' Message de confirmation avec le nouveau nom
    MsgBox "La façade PDI a été générée avec succès !" & vbCrLf & _
           "Feuille source traitée : '" & wsSource.Name & "'" & vbCrLf & _
           "Feuille destination créée : '" & nomFeuilleDestination & "'" & vbCrLf & _
           "Nom de tournée utilisé : '" & nomTournee & "'" & vbCrLf & _
           "Nombre de lignes traitées : " & (derniereLigne - 6) & vbCrLf & _
           "Les paramètres d'impression ont été configurés.", _
           vbInformation, "Génération terminée"
    
    wsDest.Activate
    
End Sub

' =====================================================
' FONCTION UTILITAIRE : Nettoyer le nom pour qu'il soit valide comme nom de feuille Excel
' =====================================================
Function NettoyerNomFeuille(nomOriginal As String) As String
    Dim nomNettoye As String
    Dim caracteresInterdits As String
    Dim i As Integer
    
    ' Caractères interdits dans les noms de feuille Excel
    caracteresInterdits = "[\]/*?:"
    
    nomNettoye = Trim(nomOriginal)
    
    ' Remplacer les caractères interdits par des underscores
    For i = 1 To Len(caracteresInterdits)
        nomNettoye = Replace(nomNettoye, Mid(caracteresInterdits, i, 1), "_")
    Next i
    
    ' Supprimer les espaces multiples et les remplacer par un seul underscore
    Do While InStr(nomNettoye, "  ") > 0
        nomNettoye = Replace(nomNettoye, "  ", " ")
    Loop
    
    ' Remplacer les espaces par des underscores si désiré (optionnel)
    ' nomNettoye = Replace(nomNettoye, " ", "_")
    
    ' S'assurer que le nom n'est pas vide
    If Len(nomNettoye) = 0 Then
        nomNettoye = "Tournee"
    End If
    
    ' Limiter la longueur pour laisser de la place pour "Fac"
    If Len(nomNettoye) > 28 Then
        nomNettoye = Left(nomNettoye, 28)
    End If
    
    NettoyerNomFeuille = nomNettoye
End Function
