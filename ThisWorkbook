' =====================================================
' SOLUTION ALTERNATIVE : Menu contextuel sans injection VBA
' À placer dans le module ThisWorkbook
' =====================================================

' Variables globales pour le menu contextuel
Public menuContextuelActif As Boolean
Public derniereFeuilleActive As String

' =====================================================
' ÉVÉNEMENTS DU CLASSEUR (À placer dans ThisWorkbook)
' =====================================================

Private Sub Workbook_SheetBeforeRightClick(ByVal Sh As Object, ByVal Target As Range, Cancel As Boolean)
    ' Gérer le menu contextuel pour toutes les feuilles
    Call GererMenuContextuelUniversel(Sh, Target)
End Sub

Private Sub Workbook_SheetActivate(ByVal Sh As Object)
    ' Nettoyer le menu contextuel lors du changement de feuille
    Call SupprimerOptionMenuContextuel
    derniereFeuilleActive = Sh.Name
End Sub

Private Sub Workbook_SheetDeactivate(ByVal Sh As Object)
    ' Nettoyer le menu contextuel lors du départ d'une feuille
    Call SupprimerOptionMenuContextuel
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    ' Nettoyer le menu contextuel avant fermeture
    Call SupprimerOptionMenuContextuel
End Sub

' =====================================================
' ÉVÉNEMENT WORKSHEET_CHANGE POUR MISE À JOUR TEMPS RÉEL
' =====================================================

Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As Range)
    ' Mise à jour temps réel des espaces libres en colonne W
    On Error Resume Next
    
    ' Vérifier si la modification concerne la colonne G (largeurs)
    If Not Intersect(Target, Sh.Range("G:G")) Is Nothing Then
        ' Vérifier si on est sur une feuille source (pas une façade)
        If EstFeuilleSource(Sh) Then
            Call MettreAJourEspacesLibres(Sh, Target)
        End If
    End If
    
    On Error GoTo 0
End Sub

' =====================================================
' GESTIONNAIRE UNIVERSEL DU MENU CONTEXTUEL
' =====================================================

Sub GererMenuContextuelUniversel(ws As Worksheet, Target As Range)
    ' Supprimer l'ancien menu
    Call SupprimerOptionMenuContextuel
    
    ' Déterminer le type de feuille et ajouter les options appropriées
    If InStr(ws.Name, "Fac") > 0 Then
        ' C'est une feuille façade
        Call AjouterMenuContextuelFacade(Target, ws)
    ElseIf EstFeuilleSource(ws) Then
        ' C'est une feuille source avec données PDI
        Call AjouterMenuContextuelSource(Target, ws)
    End If
End Sub

' =====================================================
' MENU CONTEXTUEL POUR FEUILLES FACADE
' =====================================================

Sub AjouterMenuContextuelFacade(Target As Range, ws As Worksheet)
    Dim menuContextuel As CommandBar
    Dim nouvelleOption As CommandBarButton
    
    ' Vérifier qu'on n'est pas dans la colonne des codes caisson
    If Target.Column = 27 Then Exit Sub
    
    Set menuContextuel = Application.CommandBars("Cell")
    
    ' Option principale : Navigation vers source
    Set nouvelleOption = menuContextuel.Controls.Add(Type:=msoControlButton, Before:=1)
    With nouvelleOption
        .Caption = "?? Naviguer vers ligne Source"
        .OnAction = "NaviguerDepuisFacadeVersSource"
        .Tag = "NavigationPDI"
        .FaceId = 1695
    End With
    
    ' Séparateur
'    Set nouvelleOption = menuContextuel.Controls.Add(Type:=msoControlButton, before:=2)
'    With nouvelleOption
'        .Caption = "-"
'        .BeginGroup = True
'        .Tag = "NavigationPDI"
'    End With
'
'    ' Options d'optimisation selon le contenu de la cellule
'    If Not IsEmpty(Target.Value) Then
'        Set nouvelleOption = menuContextuel.Controls.Add(Type:=msoControlButton, before:=3)
'        With nouvelleOption
'            .Caption = "?? Optimiser cette zone"
'            .OnAction = "OptimiserZoneSelectionnee"
'            .Tag = "NavigationPDI"
'        End With
'    End If
'
'    ' Option pour cellules vides
'    If IsEmpty(Target.Value) Then
'        Set nouvelleOption = menuContextuel.Controls.Add(Type:=msoControlButton, before:=3)
'        With nouvelleOption
'            .Caption = "??? Insérer image ici"
'            .OnAction = "InsererImageCellule"
'            .Tag = "NavigationPDI"
'        End With
'    End If
End Sub

' =====================================================
' MENU CONTEXTUEL POUR FEUILLES SOURCE
' =====================================================

Sub AjouterMenuContextuelSource(Target As Range, ws As Worksheet)
    Dim menuContextuel As CommandBar
    Dim nouvelleOption As CommandBarButton
    
    ' Vérifier qu'on est dans la zone des données (ligne 7+, colonnes utiles)
    If Target.Row < 7 Or Target.Column > 8 Then Exit Sub
    
    ' Vérifier qu'il y a un code caisson en colonne H
    If ws.Cells(Target.Row, 8).Value = "" Then Exit Sub
    
    Set menuContextuel = Application.CommandBars("Cell")
    
    ' Option principale : Navigation vers façade
    Set nouvelleOption = menuContextuel.Controls.Add(Type:=msoControlButton, Before:=1)
    With nouvelleOption
        .Caption = "?? Naviguer vers case Façade"
        .OnAction = "NaviguerDepuisSourceVersFacade"
        .Tag = "NavigationPDI"
        .FaceId = 1695
    End With
    
'    ' Option : Régénérer façade
'    Set nouvelleOption = menuContextuel.Controls.Add(Type:=msoControlButton, before:=2)
'    With nouvelleOption
'        .Caption = "?? Régénérer la façade"
'        .OnAction = "GenererFacadePDI"
'        .Tag = "NavigationPDI"
'        .BeginGroup = True
'    End With
End Sub

' =====================================================
' FONCTIONS DE NAVIGATION AMÉLIORÉES
' =====================================================

Sub NaviguerDepuisFacadeVersSource()
    Dim celluleCible As Range
    Dim wsSource As Worksheet
    Dim wsFacade As Worksheet
    Dim codePosition As String
    Dim ligneSourceCible As Long
    
    Set wsFacade = ActiveSheet
    Set celluleCible = Selection
    
    ' Trouver la feuille source correspondante
    Set wsSource = TrouverFeuilleSource(wsFacade)
    If wsSource Is Nothing Then
        MsgBox "? Impossible de trouver la feuille source correspondante.", vbExclamation, "Navigation impossible"
        Exit Sub
    End If
    
    ' Calculer le code de position
    codePosition = CalculerCodePosition(celluleCible, wsSource)
    If codePosition = "" Then
        MsgBox "? Impossible de calculer la position. Vérifiez que vous êtes sur une case valide.", vbExclamation, "Navigation impossible"
        Exit Sub
    End If
    
    ' Chercher la ligne correspondante
    ligneSourceCible = TrouverLigneAvecCode(wsSource, codePosition)
    If ligneSourceCible > 0 Then
        ' Navigation réussie
        wsSource.Activate
        wsSource.Cells(ligneSourceCible, 1).Select
        
        ' Message de confirmation optionnel
        Application.StatusBar = "? Navigation réussie vers " & wsSource.Name & " ligne " & ligneSourceCible
        Application.OnTime Now + TimeValue("00:00:03"), "EffacerStatusBar"
    Else
        MsgBox "? Position " & codePosition & " non trouvée dans la feuille source.", vbExclamation, "Navigation impossible"
    End If
End Sub

Sub NaviguerDepuisSourceVersFacade()
    Dim celluleCible As Range
    Dim wsSource As Worksheet
    Dim wsFacade As Worksheet
    Dim codePosition As String
    
    Set wsSource = ActiveSheet
    Set celluleCible = Selection
    
    ' Lire le code en colonne H
    codePosition = wsSource.Cells(celluleCible.Row, 8).Value
    If codePosition = "" Then
        MsgBox "? Aucun code de position trouvé sur cette ligne.", vbExclamation, "Navigation impossible"
        Exit Sub
    End If
    
    ' Trouver la feuille façade correspondante
    Set wsFacade = TrouverFeuilleFacade(wsSource)
    If wsFacade Is Nothing Then
        MsgBox "? Aucune feuille façade trouvée. Veuillez d'abord générer la façade.", vbExclamation, "Navigation impossible"
        Exit Sub
    End If
    
    ' Calculer et naviguer vers la position
    If NaviguerVersPositionFacade(wsFacade, codePosition, wsSource) Then
        Application.StatusBar = "? Navigation réussie vers " & wsFacade.Name
        Application.OnTime Now + TimeValue("00:00:03"), "EffacerStatusBar"
    Else
        MsgBox "? Position " & codePosition & " non trouvée dans la façade.", vbExclamation, "Navigation impossible"
    End If
End Sub

' =====================================================
' FONCTIONS UTILITAIRES AMÉLIORÉES
' =====================================================

Function EstFeuilleSource(ws As Worksheet) As Boolean
    ' Vérifier si c'est une feuille source en cherchant des indicateurs
    On Error Resume Next
    
    ' Exclure explicitement les feuilles façade
    If InStr(ws.Name, "Fac") > 0 Then
        EstFeuilleSource = False
        Exit Function
    End If
    
    ' Vérifier s'il y a des données en colonne A à partir de la ligne 7
    If ws.Cells(7, 1).Value <> "" Then
        ' Vérifier s'il y a une valeur en C1 (max par caisson)
        If IsNumeric(ws.Range("C1").Value) Then
            EstFeuilleSource = True
            Exit Function
        End If
    End If
    
    EstFeuilleSource = False
    On Error GoTo 0
End Function

Function TrouverFeuilleSource(wsFacade As Worksheet) As Worksheet
    Dim ws As Worksheet
    Dim nomTournee As String
    
    ' Extraire le nom de la tournée du nom de la façade
    nomTournee = Replace(wsFacade.Name, "Fac", "")
    
    ' Chercher une feuille avec ce nom
    For Each ws In ThisWorkbook.Worksheets
        If ws.Name = nomTournee And EstFeuilleSource(ws) Then
            Set TrouverFeuilleSource = ws
            Exit Function
        End If
    Next ws
    
    ' Si pas trouvé par nom, chercher la feuille précédente
    On Error Resume Next
    Set ws = wsFacade.Previous
    If Not ws Is Nothing And EstFeuilleSource(ws) Then
        Set TrouverFeuilleSource = ws
        Exit Function
    End If
    On Error GoTo 0
    
    Set TrouverFeuilleSource = Nothing
End Function

Function TrouverFeuilleFacade(wsSource As Worksheet) As Worksheet
    Dim ws As Worksheet
    Dim nomTournee As String
    Dim nomFacadeAttendu As String
    
    ' Construire le nom de façade attendu
    nomTournee = Trim(CStr(wsSource.Range("A1").Value))
    If nomTournee = "" Then nomTournee = wsSource.Name
    nomFacadeAttendu = NettoyerNomFeuille(nomTournee) & "Fac"
    
    ' Chercher la feuille façade
    For Each ws In ThisWorkbook.Worksheets
        If ws.Name = nomFacadeAttendu Then
            Set TrouverFeuilleFacade = ws
            Exit Function
        End If
    Next ws
    
    ' Si pas trouvé par nom exact, chercher toute feuille contenant "Fac"
    For Each ws In ThisWorkbook.Worksheets
        If InStr(ws.Name, "Fac") > 0 And ws.Name <> wsSource.Name Then
            Set TrouverFeuilleFacade = ws
            Exit Function
        End If
    Next ws
    
    Set TrouverFeuilleFacade = Nothing
End Function

Function CalculerCodePosition(cellule As Range, wsSource As Worksheet) As String
    Dim ligneFacade As Long, colonneFacade As Long
    Dim maxParCaisson As Integer
    Dim numeroCaisson As Integer, lettreCaisson As String
    Dim indiceLigne As Integer, lettreIndex As Integer
    Dim numeroPosition As String
    
    On Error GoTo ErreurCalcul
    
    ' Obtenir la position de référence
    Set cellule = cellule.Cells(1, 1) ' Première cellule de la sélection
    ligneFacade = cellule.Row
    colonneFacade = cellule.Column
    
    ' Ajuster pour ligne du haut si on est sur ligne du bas
    If ligneFacade Mod 2 = 0 Then ligneFacade = ligneFacade - 1
    
    ' Pour cellules fusionnées, prendre la colonne de début
    If cellule.MergeCells Then
        colonneFacade = cellule.MergeArea.Column
    End If
    
    ' Récupérer les paramètres
    maxParCaisson = Val(wsSource.Range("C1").Value)
    If maxParCaisson <= 0 Then maxParCaisson = 4
    
    ' Calculer le caisson
    indiceLigne = (ligneFacade + 1) / 2
    numeroCaisson = ((indiceLigne - 1) Mod (maxParCaisson * 4)) Mod maxParCaisson + 1
    lettreIndex = ((indiceLigne - 1) \ maxParCaisson) Mod 4
    lettreCaisson = Chr(Asc("A") + lettreIndex)
    
    ' Construire le code
    numeroPosition = Format(colonneFacade, "00")
    CalculerCodePosition = numeroCaisson & lettreCaisson & " " & numeroPosition
    
    Exit Function
    
ErreurCalcul:
    CalculerCodePosition = ""
End Function

Function TrouverLigneAvecCode(ws As Worksheet, codeRecherche As String) As Long
    Dim i As Long
    Dim derniereLigne As Long
    
    derniereLigne = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    
    For i = 7 To derniereLigne
        If ws.Cells(i, 8).Value = codeRecherche Then
            TrouverLigneAvecCode = i
            Exit Function
        End If
    Next i
    
    TrouverLigneAvecCode = 0
End Function

Function NaviguerVersPositionFacade(wsFacade As Worksheet, codePosition As String, wsSource As Worksheet) As Boolean
    Dim partieCode As String, partiePosition As String
    Dim posEspace As Integer
    Dim numeroCaisson As Integer, lettreCaisson As String
    Dim maxParCaisson As Integer
    Dim lettreIndex As Integer, indiceLigne As Integer
    Dim ligneFacade As Integer, colonneFacade As Integer
    
    On Error GoTo ErreurNavigation
    
    ' Parser le code (ex: "2A 15")
    posEspace = InStr(codePosition, " ")
    If posEspace = 0 Then GoTo ErreurNavigation
    
    partieCode = Left(codePosition, posEspace - 1)
    partiePosition = Right(codePosition, Len(codePosition) - posEspace)
    
    ' Extraire numéro et lettre
    numeroCaisson = Val(Left(partieCode, Len(partieCode) - 1))
    lettreCaisson = Right(partieCode, 1)
    colonneFacade = Val(partiePosition)
    
    ' Calculer la ligne
    maxParCaisson = Val(wsSource.Range("C1").Value)
    If maxParCaisson <= 0 Then maxParCaisson = 4
    
    lettreIndex = Asc(lettreCaisson) - Asc("A")
    indiceLigne = (lettreIndex * maxParCaisson) + numeroCaisson
    ligneFacade = (indiceLigne * 2) - 1
    
    ' Naviguer
    wsFacade.Activate
    wsFacade.Cells(ligneFacade, colonneFacade).Select
    
    NaviguerVersPositionFacade = True
    Exit Function
    
ErreurNavigation:
    NaviguerVersPositionFacade = False
End Function

' =====================================================
' NETTOYAGE ET UTILITAIRES
' =====================================================

Sub EffacerStatusBar()
    Application.StatusBar = False
End Sub

' Version améliorée de la suppression du menu contextuel
Sub SupprimerOptionMenuContextuel()
    Dim ctrl As CommandBarControl
    Dim menuContextuel As CommandBar
    Dim i As Integer
    
    On Error Resume Next
    Set menuContextuel = Application.CommandBars("Cell")
    
    ' Supprimer en partant de la fin pour éviter les décalages d'index
    For i = menuContextuel.Controls.Count To 1 Step -1
        Set ctrl = menuContextuel.Controls(i)
        If ctrl.Tag = "NavigationPDI" Then
            ctrl.Delete
        End If
    Next i
    
    On Error GoTo 0
End Sub

' =====================================================
' MACROS POUR LES OPTIONS DU MENU CONTEXTUEL
' =====================================================

Sub OptimiserZoneSelectionnee()
    Dim cellule As Range
    Set cellule = Selection
    
    MsgBox "?? Optimisation de la zone autour de " & cellule.Address & vbCrLf & _
           "Cette fonctionnalité peut être développée selon vos besoins spécifiques.", _
           vbInformation, "Optimisation locale"
End Sub

Sub InsererImageCellule()
    Dim cellule As Range
    Set cellule = Selection
    
    If IsEmpty(cellule.Value) Then
        ' Appeler la fonction d'insertion d'image existante ou créer une nouvelle
        MsgBox "??? Insertion d'image dans " & cellule.Address & vbCrLf & _
               "Sélectionnez un fichier image à insérer.", _
               vbInformation, "Insertion d'image"
        ' Ici vous pouvez appeler votre fonction d'insertion d'image existante
        ' Call InsererImagesDansCellulesVides
    Else
        MsgBox "?? Cette cellule n'est pas vide. Veuillez sélectionner une cellule vide.", _
               vbExclamation, "Cellule non vide"
    End If
End Sub

' =====================================================
' MODIFICATION DE LA MACRO PRINCIPALE
' =====================================================

' Remplacer les anciens appels par cette version simplifiée
Sub AjouterCodeMenuContextuelSimple(ws As Worksheet)
    ' Cette fonction ne fait plus rien car tout est géré par les événements du classeur
    ' Gardée pour compatibilité avec l'ancien code
End Sub

Sub AjouterCodeMenuContextuelAccueilSimple(ws As Worksheet)
    ' Cette fonction ne fait plus rien car tout est géré par les événements du classeur
    ' Gardée pour compatibilité avec l'ancien code
End Sub

' =====================================================
' FONCTION DE MISE À JOUR DES ESPACES LIBRES EN TEMPS RÉEL
' =====================================================

Sub MettreAJourEspacesLibres(ws As Worksheet, Target As Range)
    Dim ligne As Long
    Dim codeCaisson As String
    Dim prefixeCaisson As String
    Dim sommeLargeursCaisson As Double
    Dim espaceLibre As Double
    Dim maxCapacite As Double
    Dim celluleW As Range
    Dim derniereLigne As Long
    Dim i As Long
    Dim derniereLigneCaisson As Long
    
    On Error Resume Next
    
    ' Constante : capacité maximale d'un caisson
    maxCapacite = 26
    derniereLigne = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    
    ' Traiter chaque ligne modifiée
    For ligne = Target.Row To Target.Row + Target.Rows.Count - 1
        ' Vérifier qu'on est dans la zone de données (ligne 7+)
        If ligne >= 7 Then
            ' Lire le code caisson en colonne H
            codeCaisson = Trim(CStr(ws.Cells(ligne, 8).Value))
            
            If codeCaisson <> "" And Len(codeCaisson) >= 2 Then
                ' Extraire les 2 premiers caractères pour identifier le caisson
                prefixeCaisson = Left(codeCaisson, 2)
                
                ' Calculer la somme des largeurs pour ce caisson (basé sur le préfixe)
                sommeLargeursCaisson = 0
                derniereLigneCaisson = 0
                
                For i = 7 To derniereLigne
                    Dim codeActuel As String
                    codeActuel = Trim(CStr(ws.Cells(i, 8).Value))
                    
                    If Len(codeActuel) >= 2 And Left(codeActuel, 2) = prefixeCaisson Then
                        sommeLargeursCaisson = sommeLargeursCaisson + Val(ws.Cells(i, 7).Value)
                        derniereLigneCaisson = i ' Garder la trace de la dernière ligne
                    End If
                Next i
                
                ' Calculer l'espace libre du caisson
                espaceLibre = maxCapacite - sommeLargeursCaisson
                
                ' Effacer toutes les valeurs existantes pour ce caisson
                For i = 7 To derniereLigne
                    Dim codeVerif As String
                    codeVerif = Trim(CStr(ws.Cells(i, 8).Value))
                    
                    If Len(codeVerif) >= 2 And Left(codeVerif, 2) = prefixeCaisson Then
                        ws.Cells(i, 23).Value = "" ' Effacer la valeur
                    End If
                Next i
                
                ' Afficher les cm libres uniquement sur la dernière ligne du caisson
                If derniereLigneCaisson > 0 Then
                    Set celluleW = ws.Cells(derniereLigneCaisson, 23) ' Colonne W = 23
                    
                    If espaceLibre > 0 Then
                        celluleW.Value = espaceLibre & " cm libres"
                    Else
                        celluleW.Value = ""
                    End If
                End If
            End If
        End If
    Next ligne
    
    On Error GoTo 0
End Sub

' =====================================================
' FONCTION POUR CALCULER TOUS LES ESPACES LIBRES ET COLORER W6
' =====================================================

Sub CalculerTousEspacesLibres(ws As Worksheet)
    Dim derniereLigne As Long
    Dim maxCapacite As Double
    Dim i As Long
    Dim dictCaissons As Object
    Dim prefixeCaisson As String
    Dim codeCaisson As String
    Dim sommeCaisson As Double
    Dim espaceLibre As Double
    Dim derniereLigneCaisson As Long
    Dim sommeGenerale As Double
    
    On Error Resume Next
    
    ' Constante : capacité maximale d'un caisson
    maxCapacite = 26
    derniereLigne = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    sommeGenerale = 0
    
    ' Créer un dictionnaire pour stocker les caissons
    Set dictCaissons = CreateObject("Scripting.Dictionary")
    
    ' Effacer toutes les valeurs existantes en colonne W
    ws.Range("W7:W" & derniereLigne).ClearContents
    
    ' Parcourir toutes les lignes pour identifier les caissons
    For i = 7 To derniereLigne
        codeCaisson = Trim(CStr(ws.Cells(i, 8).Value))
        
        If codeCaisson <> "" And Len(codeCaisson) >= 2 Then
            prefixeCaisson = Left(codeCaisson, 2)
            
            ' Initialiser le caisson s'il n'existe pas
            If Not dictCaissons.Exists(prefixeCaisson) Then
                dictCaissons(prefixeCaisson) = Array(0, 0) ' (somme, dernière ligne)
            End If
            
            ' Mettre à jour la somme et la dernière ligne
            Dim infoCaisson As Variant
            infoCaisson = dictCaissons(prefixeCaisson)
            infoCaisson(0) = infoCaisson(0) + Val(ws.Cells(i, 7).Value)
            infoCaisson(1) = i
            dictCaissons(prefixeCaisson) = infoCaisson
        End If
    Next i
    
    ' Calculer et afficher les espaces libres pour chaque caisson
    Dim clef As Variant
    For Each clef In dictCaissons.Keys
        Dim info As Variant
        info = dictCaissons(clef)
        sommeCaisson = info(0)
        derniereLigneCaisson = info(1)
        
        espaceLibre = maxCapacite - sommeCaisson
        
        If espaceLibre > 0 Then
            ws.Cells(derniereLigneCaisson, 23).Value = espaceLibre & " cm libres"
            sommeGenerale = sommeGenerale + espaceLibre
        End If
    Next clef
    
    ' Colorer W6 en rouge si la somme générale > 0
    If sommeGenerale > 0 Then
        ws.Range("W6").Interior.Color = RGB(255, 0, 0) ' Rouge
        ws.Range("W6").Font.Color = RGB(255, 255, 255) ' Texte blanc
    Else
        ws.Range("W6").Interior.ColorIndex = xlNone
        ws.Range("W6").Font.ColorIndex = xlAutomatic
    End If
    
    On Error GoTo 0
End Sub

' =====================================================
' FONCTION : Ajouter formules automatiques pour cm libres
' =====================================================

Sub AjouterFormulesCmLibres(ws As Worksheet)
    Dim derniereLigne As Long
    Dim i As Long
    Dim formule As String
    
    On Error Resume Next
    
    ' Trouver la dernière ligne avec des données
    derniereLigne = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    
    ' Ajouter un titre en W6
    ws.Range("W6").Value = "CM LIBRES"
    ws.Range("W6").Font.Bold = True
    ws.Range("W6").HorizontalAlignment = xlCenter
    
    ' Générer automatiquement les codes caisson en colonne H
    Call GenererCodesCarsonAutomatique(ws)
    
    ' Ajouter les formules pour chaque ligne à partir de la ligne 7
    For i = 7 To derniereLigne
        If ws.Cells(i, 8).Value <> "" Then ' Si il y a un code caisson
            ' Formule pour calculer si c'est la dernière ligne du caisson
            ' et afficher les cm libres seulement sur cette ligne
            formule = "=IF(AND(H" & i & "<>"""",LEFT(H" & i & ",2)<>LEFT(H" & (i + 1) & ",2))," & _
                     "MAX(0,26-SUMIFS(G:G,H:H,""=""&LEFT(H" & i & ",2)&""*"")) & "" cm libres"","""")"
            
            ws.Cells(i, 23).Formula = formule ' Colonne W = 23
        End If
    Next i
    
    ' Ajouter mise en forme conditionnelle pour W6 et caissons incomplets
    Call AjouterMiseEnFormeConditionnelleW6(ws)
    Call AjouterMiseEnFormeConditionnelleCaissons(ws)
    
    On Error GoTo 0
End Sub

' =====================================================
' FONCTION : Ajouter mise en forme conditionnelle pour W6
' =====================================================

Sub AjouterMiseEnFormeConditionnelleW6(ws As Worksheet)
    Dim derniereLigne As Long
    Dim plageW As Range
    Dim condition As FormatCondition
    
    On Error Resume Next
    
    ' Trouver la dernière ligne avec des données
    derniereLigne = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    
    ' Définir la plage W7 à la dernière ligne
    Set plageW = ws.Range("W7:W" & derniereLigne)
    
    ' Supprimer les conditions existantes sur W6
    ws.Range("W6").FormatConditions.Delete
    
    ' Ajouter une condition pour colorer W6 en rouge si des cm libres existent
    Set condition = ws.Range("W6").FormatConditions.Add( _
        Type:=xlExpression, _
        Formula1:="=SUMPRODUCT(--(ISNUMBER(FIND(""cm libres"",W7:W" & derniereLigne & "))))>0")
    
    ' Appliquer le format (fond rouge, texte blanc)
    With condition
        .Interior.Color = RGB(255, 0, 0) ' Rouge
        .Font.Color = RGB(255, 255, 255) ' Blanc
    End With
    
    On Error GoTo 0
End Sub

' =====================================================
' FONCTION : Générer automatiquement les codes caisson
' =====================================================

Sub GenererCodesCarsonAutomatique(ws As Worksheet)
    Dim derniereLigne As Long
    Dim i As Long
    Dim maxParCaisson As Integer
    Dim largeurCumulee As Double
    Dim numeroCaisson As Integer
    Dim lettreCaisson As String
    Dim codeCaisson As String
    Dim numeroPosition As Integer
    
    On Error Resume Next
    
    ' Récupérer la valeur max par caisson depuis C1
    maxParCaisson = Val(ws.Range("C1").Value)
    If maxParCaisson <= 0 Then maxParCaisson = 4
    
    ' Trouver la dernière ligne avec des données
    derniereLigne = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    
    ' Initialiser les variables
    numeroCaisson = 1
    lettreCaisson = "A"
    largeurCumulee = 0
    numeroPosition = 1
    
    ' Parcourir toutes les lignes à partir de la ligne 7
    For i = 7 To derniereLigne
        If ws.Cells(i, 7).Value <> "" Then ' Si il y a une largeur
            Dim largeurActuelle As Double
            largeurActuelle = Val(ws.Cells(i, 7).Value)
            
            ' Vérifier si on dépasse la capacité du caisson
            If largeurCumulee + largeurActuelle > 26 Then
                ' Passer au caisson suivant
                If numeroCaisson < maxParCaisson Then
                    numeroCaisson = numeroCaisson + 1
                Else
                    numeroCaisson = 1
                    lettreCaisson = Chr(Asc(lettreCaisson) + 1)
                End If
                largeurCumulee = 0
                numeroPosition = 1
            End If
            
            ' Générer le code caisson
            codeCaisson = numeroCaisson & lettreCaisson & " " & Format(numeroPosition, "00")
            ws.Cells(i, 8).Value = codeCaisson
            
            ' Mettre à jour les variables
            largeurCumulee = largeurCumulee + largeurActuelle
            numeroPosition = numeroPosition + 1
        End If
    Next i
    
    On Error GoTo 0
End Sub

' =====================================================
' FONCTION : Mise en forme conditionnelle pour caissons incomplets
' =====================================================

Sub AjouterMiseEnFormeConditionnelleCaissons(ws As Worksheet)
    Dim derniereLigne As Long
    Dim plageH As Range
    Dim condition As FormatCondition
    
    On Error Resume Next
    
    ' Trouver la dernière ligne avec des données
    derniereLigne = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    
    ' Définir la plage H7 à la dernière ligne
    Set plageH = ws.Range("H7:H" & derniereLigne)
    
    ' Supprimer les conditions existantes sur la plage H
    plageH.FormatConditions.Delete
    
    ' Ajouter une condition pour colorer en rouge les caissons incomplets
    Set condition = plageH.FormatConditions.Add( _
        Type:=xlExpression, _
        Formula1:="=AND(H7<>"""",SUMIFS($G:$G,$H:$H,""=""&LEFT(H7,2)&""*"")<>26)")
    
    ' Appliquer le format (fond rouge, texte blanc)
    With condition
        .Interior.Color = RGB(255, 0, 0) ' Rouge
        .Font.Color = RGB(255, 255, 255) ' Blanc
    End With
    
    On Error GoTo 0
End Sub
