Sub MettreEnFormeAccueil()
    Dim ws As Worksheet
    Dim plageW As Range, plageG As Range
    Dim derniereLigne As Long

    ' Déterminer la feuille active (compatible avec toutes les feuilles sources)
    Set ws = ActiveSheet
    
    ' DEBUG : Afficher des informations sur la feuille
    MsgBox "Debug MettreEnFormeAccueil:" & vbCrLf & _
           "Feuille active: " & ws.Name & vbCrLf & _
           "Est feuille source: " & EstFeuilleSource(ws), vbInformation
    
    If Not EstFeuilleSource(ws) Then
        ' Si pas une feuille source, essayer "Accueil" par défaut
        On Error Resume Next
        Set ws = ThisWorkbook.Sheets("Accueil")
        On Error GoTo 0
        If ws Is Nothing Then 
            MsgBox "Aucune feuille source trouvée !", vbExclamation
            Exit Sub
        End If
        MsgBox "Utilisation de la feuille Accueil par défaut", vbInformation
    End If

    ' Centrer tout le contenu de la feuille horizontalement et verticalement
    With ws.Cells
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
    End With

    ' Trouver la dernière ligne utilisée
    derniereLigne = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row

    ' Définir les plages concernées
    Set plageW = ws.Range("W7:W" & derniereLigne)
    Set plageG = ws.Range("G7:G" & derniereLigne)

    ' Supprimer les anciennes règles SEULEMENT pour les colonnes G et W (pas H)
    plageW.FormatConditions.Delete
    plageG.FormatConditions.Delete
    ' IMPORTANT : Ne pas supprimer les conditions de la colonne H (codes caisson)

    ' Appliquer mise en forme conditionnelle colonne W (texte contient "cm libres" ? fond rouge, texte blanc)
    With plageW.FormatConditions.Add(Type:=xlTextString, String:="cm libres", TextOperator:=xlContains)
        .Interior.Color = RGB(255, 0, 0)
        .Font.Color = RGB(255, 255, 255)
        .Font.Bold = True
    End With

    ' Appliquer mise en forme conditionnelle colonne G (>0 ? fond bleu clair, texte noir)
    With plageG.FormatConditions.Add(Type:=xlCellValue, Operator:=xlGreater, Formula1:="0")
        .Interior.Color = RGB(173, 216, 230) ' Bleu clair
        .Font.Color = RGB(0, 0, 0) ' Noir
    End With

    ' Rendre la colonne W visible si elle était masquée
    ws.Columns("W:W").Hidden = False
    ws.Columns("W:W").ColumnWidth = 15

    ' Coloration conditionnelle pour H6 et W6
    Call ColorerCellulesH6EtW6(ws)

    'MsgBox "Mise en forme conditionnelle appliquée avec succès.", vbInformation
End Sub

' =====================================================
' FONCTION : Coloration conditionnelle pour H6 et W6
' =====================================================

Sub ColorerCellulesH6EtW6(ws As Worksheet)
    Dim plageH As Range, plageW As Range
    Dim derniereLigne As Long
    Dim i As Long
    Dim rougeDetecteH As Boolean, rougeDetecteW As Boolean, rougeDetecteHorsCasier As Boolean
    Dim nombreColonnes As Integer, nombreCaissonsMax As Integer
    
    On Error Resume Next
    
    ' Trouver la dernière ligne avec des données
    derniereLigne = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    
    ' Calculer le nombre de caissons max et l'afficher en A2
    nombreColonnes = Val(ws.Range("C1").Value)
    If nombreColonnes <= 0 Then nombreColonnes = 4 ' Valeur par défaut
    nombreCaissonsMax = nombreColonnes * 4
    ws.Range("A2").Value = "Nb caissons max: " & nombreCaissonsMax
    ws.Range("A2").Font.Bold = True
    
    ' Vérifier s'il y a des PDI hors casier dans la colonne H
    Set plageH = ws.Range("H7:H" & derniereLigne)
    rougeDetecteH = False
    rougeDetecteHorsCasier = False
    For i = 7 To derniereLigne
        Dim codeActuel As String
        codeActuel = Trim(CStr(ws.Cells(i, 8).Value))
        
        ' Vérifier si le code existe et extraire la partie numérique
        If codeActuel <> "" And Len(codeActuel) >= 2 Then
            Dim partieNumerique As String
            partieNumerique = Left(codeActuel, 1) ' Premier caractère = numéro caisson
            
            ' Vérifier si le numéro de caisson dépasse le max autorisé
            If IsNumeric(partieNumerique) Then
                If Val(partieNumerique) > nombreColonnes Then
                    rougeDetecteHorsCasier = True
                    Exit For
                End If
            End If
        End If
        
        ' Vérifier la couleur existante pour d'autres erreurs
        If ws.Cells(i, 8).Interior.Color = RGB(255, 0, 0) Then
            rougeDetecteH = True
        End If
    Next i
    
    ' Vérifier s'il y a des valeurs "cm libres" positives dans la colonne W
    Set plageW = ws.Range("W7:W" & derniereLigne)
    rougeDetecteW = False
    For i = 7 To derniereLigne
        Dim valeurW As String
        valeurW = Trim(CStr(ws.Cells(i, 23).Value))
        ' Vérifier si la cellule contient "cm libres" et n'est pas "0 cm libres"
        If InStr(valeurW, "cm libres") > 0 And valeurW <> "0 cm libres" And valeurW <> "" Then
            ' Vérifier si c'est un nombre positif avant "cm libres"
            Dim valeurNumerique As Double
            valeurNumerique = Val(valeurW)
            If valeurNumerique > 0 Then
                rougeDetecteW = True
                Exit For
            End If
        End If
    Next i
    
    ' Colorer H6 selon la présence de rouge dans la colonne H ou PDI hors casier
    With ws.Range("H6")
        If rougeDetecteH Or rougeDetecteHorsCasier Then
            .Interior.Color = RGB(255, 0, 0) ' Rouge
            .Font.Color = RGB(255, 255, 255) ' Texte blanc
        Else
            .Interior.Color = RGB(0, 255, 0) ' Vert
            .Font.Color = RGB(0, 0, 0) ' Texte noir
        End If
    End With
    
    ' Colorer W6 selon la présence de cm libres positifs dans la colonne W
    With ws.Range("W6")
        If rougeDetecteW Then
            .Interior.Color = RGB(255, 0, 0) ' Rouge
            .Font.Color = RGB(255, 255, 255) ' Texte blanc
        Else
            .Interior.Color = RGB(0, 255, 0) ' Vert
            .Font.Color = RGB(0, 0, 0) ' Texte noir
        End If
    End With
    
    ' Colorer les cases module hors casier en rouge
    For i = 7 To derniereLigne
        Dim codeModule As String
        codeModule = Trim(CStr(ws.Cells(i, 8).Value))
        
        If codeModule <> "" And Len(codeModule) >= 2 Then
            Dim numeroModule As String
            numeroModule = Left(codeModule, 1)
            
            If IsNumeric(numeroModule) Then
                If Val(numeroModule) > nombreColonnes Then
                    ' PDI hors casier - colorer en rouge
                    ws.Cells(i, 8).Interior.Color = RGB(255, 0, 0)
                    ws.Cells(i, 8).Font.Color = RGB(255, 255, 255)
                Else
                    ' PDI dans casier - remettre couleur normale si pas d'autre erreur
                    If ws.Cells(i, 8).Interior.Color = RGB(255, 0, 0) Then
                        ws.Cells(i, 8).Interior.ColorIndex = xlNone
                        ws.Cells(i, 8).Font.ColorIndex = xlAutomatic
                    End If
                End If
            End If
        End If
    Next i
    
    On Error GoTo 0
End Sub

' =====================================================
' FONCTION DE TEST POUR DÉBUGGER LES CM LIBRES
' =====================================================

Sub TestCmLibres()
    Dim ws As Worksheet
    
    ' Prendre la feuille active
    Set ws = ActiveSheet
    
    MsgBox "Test sur la feuille: " & ws.Name & vbCrLf & _
           "EstFeuilleSource: " & EstFeuilleSource(ws), vbInformation
    
    ' Forcer l'appel direct de la nouvelle fonction
    If EstFeuilleSource(ws) Then
        Call CalculerCmLibresDirectement(ws)
        MsgBox "CalculerCmLibresDirectement terminé", vbInformation
    Else
        MsgBox "Cette feuille n'est pas reconnue comme feuille source", vbExclamation
    End If
End Sub

' =====================================================
' FONCTION DE TEST SIMPLIFIÉE SANS PROTECTION
' =====================================================

Sub TestCmLibresSimple()
    Dim ws As Worksheet
    Dim i As Long
    Dim codeCaisson As String
    Dim prefixeCaisson As String
    Dim largeurActuelle As Double
    Dim totalCaisson As Double
    Dim derniereLigne As Long
    Dim j As Long
    
    Set ws = ActiveSheet
    
    ' Déprotéger complètement
    ws.Unprotect
    
    MsgBox "Test calcul direct sur " & ws.Name & " - Feuille déprotégée", vbInformation
    
    ' Tester sur une ligne spécifique
    i = 7
    If ws.Cells(i, 8).Value <> "" Then
        codeCaisson = Trim(CStr(ws.Cells(i, 8).Value))
        prefixeCaisson = Left(codeCaisson, 2)
        largeurActuelle = Val(ws.Cells(i, 7).Value)
        derniereLigne = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
        
        ' Calculer le total pour ce caisson
        totalCaisson = 0
        For j = 7 To derniereLigne
            If Len(Trim(CStr(ws.Cells(j, 8).Value))) >= 2 Then
                If Left(Trim(CStr(ws.Cells(j, 8).Value)), 2) = prefixeCaisson Then
                    totalCaisson = totalCaisson + Val(ws.Cells(j, 7).Value)
                End If
            End If
        Next j
        
        Dim espaceLibre As Double
        espaceLibre = 26 - totalCaisson
        
        MsgBox "Test calcul ligne " & i & ":" & vbCrLf & _
               "Code: " & codeCaisson & vbCrLf & _
               "Préfixe: " & prefixeCaisson & vbCrLf & _
               "Largeur ligne: " & largeurActuelle & vbCrLf & _
               "Total caisson: " & totalCaisson & vbCrLf & _
               "Espace libre: " & espaceLibre, vbInformation
        
        ' Insérer directement la valeur
        If espaceLibre > 0 Then
            ws.Cells(i, 23).Value = espaceLibre & " cm libres"
        Else
            ws.Cells(i, 23).Value = "0 cm libres"
        End If
        
        MsgBox "Valeur insérée en W" & i & ": " & ws.Cells(i, 23).Value, vbInformation
    Else
        MsgBox "Pas de code caisson en ligne 7", vbExclamation
    End If
End Sub

' =====================================================
' FONCTION DE TEST POUR LE CLIGNOTEMENT
' =====================================================

Sub TestClignotement()
    Dim ws As Worksheet
    Dim celluleTest As Range
    
    Set ws = ActiveSheet
    Set celluleTest = Selection
    
    MsgBox "Test clignotement sur la cellule sélectionnée: " & celluleTest.Address, vbInformation
    
    ' Appeler directement la fonction de clignotement
    Call FaireClignoterCellule(ws, celluleTest.Row, celluleTest.Column)
    
    MsgBox "Test terminé", vbInformation
End Sub
