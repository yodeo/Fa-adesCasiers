' =====================================================
' MACRO : Nettoyer les doublons à l'intérieur de chaque case PDI
' Analyse seulement le contenu interne de chaque case sans modifier la structure
' Exemple : "51-49-47-67-51-51A-51B-89" devient "49-47-67-51-51A-51B-89"
' =====================================================

Sub NettoyerDoublonsInternesCases()
    Dim wsFacade As Worksheet
    Dim derniereLigne As Long
    Dim ligneActuelle As Long
    Dim colonneActuelle As Long
    Dim rngCellule As Range
    Dim contenuOriginal As String
    Dim contenuNettoye As String
    Dim compteurCasesModifiees As Long
    Dim msgResultat As String
    
    ' Vérifier que la feuille Facade_PDI existe
    On Error GoTo FacadeInexistante
    Set wsFacade = ThisWorkbook.Sheets("Facade_PDI")
    On Error GoTo 0
    
    ' Désactiver les mises à jour pour améliorer les performances
    Application.ScreenUpdating = False
    
    ' Trouver la dernière ligne utilisée dans la façade
    derniereLigne = wsFacade.UsedRange.Rows.Count
    compteurCasesModifiees = 0
    
    msgResultat = "?? NETTOYAGE DES DOUBLONS INTERNES" & vbCrLf & vbCrLf
    
    ' Parcourir seulement les lignes impaires (lignes des numéros PDI)
    For ligneActuelle = 1 To derniereLigne Step 2
        colonneActuelle = 1
        
        Do While colonneActuelle <= 26 ' Colonnes A à Z
            Set rngCellule = wsFacade.Cells(ligneActuelle, colonneActuelle)
            
            ' Si la cellule n'est pas vide, nettoyer son contenu
            If rngCellule.Value <> "" Then
                contenuOriginal = CStr(rngCellule.Value)
                contenuNettoye = NettoyerContenuCase(contenuOriginal)
                
                ' Si le contenu a changé, le mettre à jour
                If contenuOriginal <> contenuNettoye Then
                    rngCellule.Value = contenuNettoye
                    compteurCasesModifiees = compteurCasesModifiees + 1
                    
                    msgResultat = msgResultat & "Case L" & ligneActuelle & "C" & colonneActuelle & " :" & vbCrLf
                    msgResultat = msgResultat & "  Avant : " & contenuOriginal & vbCrLf
                    msgResultat = msgResultat & "  Après : " & contenuNettoye & vbCrLf & vbCrLf
                End If
                
                ' Gérer les cellules fusionnées pour avancer correctement
                If rngCellule.MergeCells Then
                    colonneActuelle = colonneActuelle + rngCellule.MergeArea.Columns.Count
                Else
                    colonneActuelle = colonneActuelle + 1
                End If
            Else
                colonneActuelle = colonneActuelle + 1
            End If
        Loop
    Next ligneActuelle
    
    ' Réactiver les mises à jour
    Application.ScreenUpdating = True
    
    ' Message de résultat
    If compteurCasesModifiees > 0 Then
        msgResultat = msgResultat & "? RÉSULTAT :" & vbCrLf
        msgResultat = msgResultat & "• " & compteurCasesModifiees & " cases nettoyées" & vbCrLf
        msgResultat = msgResultat & "• Structure de la façade préservée" & vbCrLf
        msgResultat = msgResultat & "• Formatage conservé"
        
        MsgBox msgResultat, vbInformation, "Nettoyage terminé"
    Else
        MsgBox "? Aucun doublon interne détecté !" & vbCrLf & _
               "Toutes les cases sont déjà optimisées.", vbInformation, "Analyse terminée"
    End If
    
    Exit Sub
    
FacadeInexistante:
    MsgBox "? Erreur : La feuille 'Facade_PDI' n'existe pas !" & vbCrLf & _
           "Veuillez d'abord générer la façade avec la macro principale.", _
           vbCritical, "Façade introuvable"
End Sub

' =====================================================
' FONCTION : Nettoyer le contenu d'une case individuelle
' =====================================================
Function NettoyerContenuCase(contenuOriginal As String) As String
    Dim lignes As Variant
    Dim ligneNumeros As String
    Dim ligneObservations As String
    Dim numerosNettoyes As String
    
    ' Séparer les numéros des observations (saut de ligne)
    If InStr(contenuOriginal, vbCrLf) > 0 Then
        lignes = Split(contenuOriginal, vbCrLf)
        ligneNumeros = Trim(lignes(0))
        If UBound(lignes) >= 1 Then
            ligneObservations = Trim(lignes(1))
        Else
            ligneObservations = ""
        End If
    Else
        ligneNumeros = Trim(contenuOriginal)
        ligneObservations = ""
    End If
    
    ' Nettoyer seulement la ligne des numéros
    numerosNettoyes = SupprimerDoublonsNumeros(ligneNumeros)
    
    ' Reconstituer le contenu
    If ligneObservations <> "" Then
        NettoyerContenuCase = numerosNettoyes & vbCrLf & ligneObservations
    Else
        NettoyerContenuCase = numerosNettoyes
    End If
End Function

' =====================================================
' FONCTION : Supprimer les doublons dans une chaîne de numéros
' =====================================================
Function SupprimerDoublonsNumeros(chaineNumeros As String) As String
    Dim symboleDebut As String
    Dim chaineNettoyee As String
    Dim segments As Variant
    Dim i As Integer
    Dim dictNumeros As Object
    Dim numerosUniques As Collection
    Dim numeroNormalise As String
    Dim resultat As String
    
    ' Conserver le symbole en début (triangle, carré, etc.)
    symboleDebut = ExtraireSymboleDebut(chaineNumeros)
    chaineNettoyee = EnleverSymboleDebut(chaineNumeros)
    
    ' Si la chaîne est vide après nettoyage, retourner le symbole seul
    If Trim(chaineNettoyee) = "" Then
        SupprimerDoublonsNumeros = symboleDebut
        Exit Function
    End If
    
    ' Créer un dictionnaire pour traquer les numéros déjà vus
    Set dictNumeros = CreateObject("Scripting.Dictionary")
    Set numerosUniques = New Collection
    
    ' Séparer par différents délimiteurs possibles
    ' D'abord par "/" (voies multiples), puis par "-" (plages)
    If InStr(chaineNettoyee, " / ") > 0 Then
        ' Voies multiples : traiter chaque partie séparément
        segments = Split(chaineNettoyee, " / ")
        For i = 0 To UBound(segments)
            Dim partieNettoyee As String
            partieNettoyee = SupprimerDoublonsPartie(Trim(segments(i)), dictNumeros)
            If partieNettoyee <> "" Then
                If numerosUniques.Count = 0 Then
                    numerosUniques.Add partieNettoyee
                Else
                    numerosUniques.Add " / " & partieNettoyee
                End If
            End If
        Next i
    Else
        ' Pas de voies multiples : traiter directement
        Dim partieUnique As String
        partieUnique = SupprimerDoublonsPartie(chaineNettoyee, dictNumeros)
        If partieUnique <> "" Then
            numerosUniques.Add partieUnique
        End If
    End If
    
    ' Reconstituer le résultat
    resultat = ""
    For i = 1 To numerosUniques.Count
        resultat = resultat & numerosUniques(i)
    Next i
    
    SupprimerDoublonsNumeros = symboleDebut & resultat
End Function

' =====================================================
' FONCTION : Supprimer les doublons dans une partie de numéros
' =====================================================
Function SupprimerDoublonsPartie(partie As String, dictNumeros As Object) As String
    Dim elements As Variant
    Dim i As Integer
    Dim element As String
    Dim numeroNormalise As String
    Dim resultats As Collection
    Dim resultat As String
    
    Set resultats = New Collection
    
    ' Séparer par tirets (pour les plages comme "51-49-47")
    If InStr(partie, "-") > 0 Then
        elements = Split(partie, "-")
    Else
        ' Un seul élément
        ReDim elements(0)
        elements(0) = partie
    End If
    
    ' Traiter chaque élément
    For i = 0 To UBound(elements)
        element = Trim(elements(i))
        If element <> "" Then
            numeroNormalise = NormaliserNumero(element)
            
            ' Ajouter seulement si pas déjà vu
            If Not dictNumeros.Exists(numeroNormalise) Then
                dictNumeros.Add numeroNormalise, True
                
                ' Ajouter le délimiteur approprié
                If resultats.Count = 0 Then
                    resultats.Add element
                Else
                    resultats.Add "-" & element
                End If
            End If
        End If
    Next i
    
    ' Reconstituer la partie
    resultat = ""
    For i = 1 To resultats.Count
        resultat = resultat & resultats(i)
    Next i
    
    SupprimerDoublonsPartie = resultat
End Function

' =====================================================
' FONCTION : Normaliser un numéro pour la comparaison
' =====================================================
Function NormaliserNumero(numero As String) As String
    Dim numeroNettoye As String
    Dim regex As Object
    Dim matches As Object
    
    numeroNettoye = UCase(Trim(numero))
    
    ' Créer un regex pour extraire numéro + extension
    Set regex = CreateObject("VBScript.RegExp")
    regex.pattern = "^(\d+)\s*([A-Z]*|BIS|TER|QUATER)?$"
    regex.IgnoreCase = True
    
    Set matches = regex.Execute(numeroNettoye)
    
    If matches.Count > 0 Then
        Dim numeroBase As String
        Dim extension As String
        
        numeroBase = matches(0).SubMatches(0)
        extension = matches(0).SubMatches(1)
        
        If extension <> "" Then
            NormaliserNumero = numeroBase & " " & extension
        Else
            NormaliserNumero = numeroBase
        End If
    Else
        ' Si pas de match, retourner tel quel
        NormaliserNumero = numeroNettoye
    End If
End Function

' =====================================================
' FONCTION : Extraire le symbole en début de chaîne
' =====================================================
Function ExtraireSymboleDebut(texte As String) As String
    Dim premier As String
    
    If Len(texte) = 0 Then
        ExtraireSymboleDebut = ""
        Exit Function
    End If
    
    premier = Left(texte, 1)
    
    ' Vérifier si c'est un symbole Unicode
    If premier = ChrW(&H25B2) Or premier = ChrW(&H25A0) Or premier = ChrW(&H25CB) Then
        ' Inclure l'espace qui suit si présent
        If Len(texte) > 1 And Mid(texte, 2, 1) = " " Then
            ExtraireSymboleDebut = Left(texte, 2)
        Else
            ExtraireSymboleDebut = premier
        End If
    Else
        ExtraireSymboleDebut = ""
    End If
End Function

' =====================================================
' FONCTION : Enlever le symbole en début de chaîne
' =====================================================
Function EnleverSymboleDebut(texte As String) As String
    Dim symbole As String
    symbole = ExtraireSymboleDebut(texte)
    
    If symbole <> "" Then
        EnleverSymboleDebut = Trim(Mid(texte, Len(symbole) + 1))
    Else
        EnleverSymboleDebut = texte
    End If
End Function

' =====================================================
' MACRO DE TEST : Analyser sans modifier
' =====================================================
Sub AnalyserDoublonsInternesSansModifier()
    Dim wsFacade As Worksheet
    Dim derniereLigne As Long
    Dim ligneActuelle As Long
    Dim colonneActuelle As Long
    Dim rngCellule As Range
    Dim contenuOriginal As String
    Dim contenuNettoye As String
    Dim compteurDoublons As Long
    Dim msgAnalyse As String
    
    ' Vérifier que la feuille Facade_PDI existe
    On Error GoTo FacadeInexistante
    Set wsFacade = ThisWorkbook.Sheets("Facade_PDI")
    On Error GoTo 0
    
    ' Analyser la façade
    derniereLigne = wsFacade.UsedRange.Rows.Count
    compteurDoublons = 0
    
    msgAnalyse = "?? ANALYSE DES DOUBLONS INTERNES" & vbCrLf & vbCrLf
    
    ' Parcourir seulement les lignes impaires
    For ligneActuelle = 1 To derniereLigne Step 2
        colonneActuelle = 1
        
        Do While colonneActuelle <= 26
            Set rngCellule = wsFacade.Cells(ligneActuelle, colonneActuelle)
            
            If rngCellule.Value <> "" Then
                contenuOriginal = CStr(rngCellule.Value)
                contenuNettoye = NettoyerContenuCase(contenuOriginal)
                
                If contenuOriginal <> contenuNettoye Then
                    compteurDoublons = compteurDoublons + 1
                    msgAnalyse = msgAnalyse & "?? Case L" & ligneActuelle & "C" & colonneActuelle & " :" & vbCrLf
                    msgAnalyse = msgAnalyse & "  Actuel : " & contenuOriginal & vbCrLf
                    msgAnalyse = msgAnalyse & "  Optimisé : " & contenuNettoye & vbCrLf & vbCrLf
                End If
                
                ' Gérer les cellules fusionnées
                If rngCellule.MergeCells Then
                    colonneActuelle = colonneActuelle + rngCellule.MergeArea.Columns.Count
                Else
                    colonneActuelle = colonneActuelle + 1
                End If
            Else
                colonneActuelle = colonneActuelle + 1
            End If
        Loop
    Next ligneActuelle
    
    ' Résultat final
    If compteurDoublons > 0 Then
        msgAnalyse = msgAnalyse & "?? RÉSUMÉ :" & vbCrLf
        msgAnalyse = msgAnalyse & "• " & compteurDoublons & " cases contiennent des doublons" & vbCrLf
        msgAnalyse = msgAnalyse & "• Utilisez 'NettoyerDoublonsInternesCases' pour les corriger"
    Else
        msgAnalyse = "? PARFAIT !" & vbCrLf & vbCrLf
        msgAnalyse = msgAnalyse & "Aucun doublon interne détecté." & vbCrLf
        msgAnalyse = msgAnalyse & "Toutes les cases sont optimisées !"
    End If
    
    MsgBox msgAnalyse, vbInformation, "Analyse des doublons internes"
    Exit Sub
    
FacadeInexistante:
    MsgBox "? Erreur : La feuille 'Facade_PDI' n'existe pas !" & vbCrLf & _
           "Veuillez d'abord générer la façade.", vbCritical, "Façade introuvable"
End Sub

