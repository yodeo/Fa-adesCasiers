' =====================================================
' FONCTION : Déterminer si un PDI est rattaché (basé sur colonne F)
' =====================================================
Function EstPDIRattache(numPDI As String, ligneActuelle As Long) As Boolean
    ' Cette fonction détermine si un PDI est "rattaché" en vérifiant
    ' la valeur de la colonne F (TYPE PDI)
    
    Dim wsAccueil As Worksheet
    Dim typePDI As String
    
    Set wsAccueil = ActiveSheet
    
    ' Lire la valeur de la colonne F (TYPE PDI) - colonne 6
    typePDI = UCase(Trim(wsAccueil.Cells(ligneActuelle, 6).Text))
    
    ' Vérifier si le type PDI contient "RATTACHÉ C" ou "RATTACHÉ P"
    If typePDI = "RATTACHÉ C" Or typePDI = "RATTACHÉ P" Then
        EstPDIRattache = True
    Else
        EstPDIRattache = False
    End If
End Function



' =====================================================
' MACRO : Version avec choix de largeur via boîte de dialogue
' =====================================================
Sub DefinirLargeurPersonnalisee()
    Dim wsAccueil As Worksheet
    Dim derniereLigne As Long
    Dim i As Long
    Dim numPDI As String
    Dim compteurModifiesPrincipaux As Long
    Dim compteurModifies0 As Long
    Dim nouvelleLargeur As String
    Dim largeurNumerique As Integer
    
    ' Supprimer la protection de la feuille
    Call EnleverProtectionFeuilleActive
    
    ' Demander à l'utilisateur la largeur souhaitée
    nouvelleLargeur = InputBox("Quelle largeur souhaitez-vous appliquer aux PDI principaux ?" & vbCrLf & _
                              "(Les PDI rattachés seront automatiquement mis à 0)", _
                              "Définir largeur personnalisée", "4")
    
    ' Vérifier si l'utilisateur a annulé ou entré une valeur invalide
    If nouvelleLargeur = "" Then Exit Sub
    
    largeurNumerique = ConvertirEnEntier(nouvelleLargeur, -1)
    If largeurNumerique < 1 Or largeurNumerique > 26 Then
        MsgBox "Veuillez entrer une largeur entre 1 et 26.", vbExclamation
        Exit Sub
    End If
    
    ' Initialisation
    Set wsAccueil = ActiveSheet

    compteurModifiesPrincipaux = 0
    compteurModifies0 = 0
    
    ' Désactiver les mises à jour pour améliorer les performances
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    
    ' Trouver la dernière ligne avec des données
    derniereLigne = wsAccueil.Cells(wsAccueil.Rows.Count, "A").End(xlUp).Row
    
    ' Parcourir les données à partir de la ligne 7
    For i = 7 To derniereLigne
        ' Lire le numéro PDI de la colonne A
        numPDI = CStr(wsAccueil.Cells(i, 1).Text)
        
        ' Vérifier si ce n'est pas une ligne vide
        If numPDI <> "" Then
            If EstPDIRattache(numPDI, i) Then
                ' PDI rattaché : mettre à 0
                wsAccueil.Cells(i, 7).Value = 0
                compteurModifies0 = compteurModifies0 + 1
            Else
                ' PDI principal : mettre à la largeur personnalisée
                wsAccueil.Cells(i, 7).Value = largeurNumerique
                compteurModifiesPrincipaux = compteurModifiesPrincipaux + 1
            End If
        End If
    Next i
    
    ' Réactiver les mises à jour
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    
    ' Message de confirmation
    MsgBox "Largeurs mises à jour :" & vbCrLf & _
           "- " & compteurModifiesPrincipaux & " PDI principaux mis à " & largeurNumerique & vbCrLf & _
           "- " & compteurModifies0 & " PDI rattachés mis à 0", _
           vbInformation, "Mise à jour terminée"
End Sub


Sub DefinirLargeurPersonnaliseeBat()
    Dim wsAccueil As Worksheet
    Dim derniereLigne As Long
    Dim i As Long
    Dim numPDI As String
    Dim typePDI As String
    Dim compteurModifiesPrincipaux As Long
    Dim compteurModifies0 As Long
    Dim nouvelleLargeur As String
    Dim largeurNumerique As Integer

    ' Demander à l'utilisateur la largeur souhaitée
    nouvelleLargeur = InputBox("Quelle largeur souhaitez-vous appliquer aux PDI de type 'Bat P' ou 'Bat C' ?" & vbCrLf & _
                              "(Les PDI rattachés seront automatiquement mis à 0)", _
                              "Définir largeur personnalisée", "4")

    ' Vérifier si l'utilisateur a annulé ou entré une valeur invalide
    If nouvelleLargeur = "" Then Exit Sub

    largeurNumerique = ConvertirEnEntier(nouvelleLargeur, -1)
    If largeurNumerique < 1 Or largeurNumerique > 26 Then
        MsgBox "Veuillez entrer une largeur entre 1 et 26.", vbExclamation
        Exit Sub
    End If

    ' Initialisation
    Set wsAccueil = ActiveSheet

    compteurModifiesPrincipaux = 0
    compteurModifies0 = 0

    ' Désactiver les mises à jour pour améliorer les performances
    Application.ScreenUpdating = False
    Application.EnableEvents = False

    ' Trouver la dernière ligne avec des données
    derniereLigne = wsAccueil.Cells(wsAccueil.Rows.Count, "A").End(xlUp).Row

    ' Parcourir les données à partir de la ligne 7
    For i = 7 To derniereLigne
        numPDI = CStr(wsAccueil.Cells(i, 1).Text)
        typePDI = Trim(wsAccueil.Cells(i, 6).Value)

        If numPDI <> "" Then
            If EstPDIRattache(numPDI, i) Then
                wsAccueil.Cells(i, 7).Value = 0
                compteurModifies0 = compteurModifies0 + 1
            ElseIf typePDI = "Bat P" Or typePDI = "Bat C" Then
                wsAccueil.Cells(i, 7).Value = largeurNumerique
                compteurModifiesPrincipaux = compteurModifiesPrincipaux + 1
            End If
        End If
    Next i

    ' Réactiver les mises à jour
    Application.ScreenUpdating = True
    Application.EnableEvents = True

    ' Message de confirmation
    MsgBox "Largeurs mises à jour :" & vbCrLf & _
           "- " & compteurModifiesPrincipaux & " PDI de type 'Bat P' ou 'Bat C' mis à " & largeurNumerique & vbCrLf & _
           "- " & compteurModifies0 & " PDI rattachés mis à 0", _
           vbInformation, "Mise à jour terminée"
End Sub

Function ConvertirEnEntier(valeur As String, valeurParDefaut As Integer) As Integer
    If IsNumeric(valeur) Then
        ConvertirEnEntier = CInt(valeur)
    Else
        ConvertirEnEntier = valeurParDefaut
    End If
End Function



